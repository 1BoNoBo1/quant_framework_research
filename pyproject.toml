[tool.poetry]
name = "qframe"
version = "0.1.0"
description = "Framework Quantitatif Professionnel - Recherche et Production"
authors = ["Quantitative Research Team <research@qframe.dev>"]
readme = "README.md"
packages = [{include = "qframe"}]
homepage = "https://github.com/1BoNoBo1/quant_framework_research"
repository = "https://github.com/1BoNoBo1/quant_framework_research"
documentation = "https://qframe.readthedocs.io"
keywords = ["quantitative", "trading", "finance", "machine-learning", "crypto"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
]

[tool.poetry.dependencies]
python = "^3.11,<3.14"
# Core dependencies
pandas = "^2.1.0"
numpy = "^1.25.0"
pydantic = "^2.4.0"
pydantic-settings = "^2.0.0"
typer = "^0.12.0"
rich = "^13.6.0"
structlog = "^23.2.0"

# Async and performance
asyncio = "*"
aiohttp = "^3.9.0"
aiofiles = "^23.2.1"

# Machine Learning & Scientific Computing
torch = "^2.1.0"
scikit-learn = "^1.3.0"
scipy = "^1.11.0"

# Financial & Technical Analysis
ta-lib = "^0.4.28"
ccxt = "^4.1.0"
python-binance = "^1.0.19"

# Data Storage & Caching
redis = "^5.0.0"
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.0"
asyncpg = "^0.30.0"
influxdb-client = "^1.38.0"

# Visualization
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
plotly = "^5.17.0"

# MLOps & Experiment Tracking
mlflow = "^2.8.0"

# Configuration & Environment
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
loguru = "^0.7.3"
streamlit = "^1.50.0"
requests = "^2.32.5"
websocket-client = "^1.8.0"
httpx = "^0.28.1"
python-dateutil = "^2.9.0.post0"
pytz = "^2025.2"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.88.0"

# Code Quality
black = "^23.9.0"
ruff = "^0.1.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python-legacy"], version = "^0.20.0"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.8"
mkdocs-autorefs = "^0.5.0"
mkdocs-mermaid2-plugin = "^1.1.1"
mkdocs-glightbox = "^0.3.5"
mkdocs-git-revision-date-localized-plugin = "^1.2.4"
mkdocs-git-committers-plugin-2 = "^2.2.3"

# Documentation Professionnelle Avancée
mkdocs-jupyter = "^0.24.6"
mkdocs-coverage = "^1.0.0"
mike = "^2.0.0"
mkdocs-minify-plugin = "^0.7.1"
mkdocs-redirects = "^1.2.1"
mkdocs-include-markdown-plugin = "^6.0.4"
mkdocs-awesome-pages-plugin = "^2.9.2"
mkdocs-macros-plugin = "^1.0.5"
# Keep sphinx for fallback
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"

# Development Tools
ipython = "^8.16.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"

[tool.poetry.group.production.dependencies]
# Production monitoring & deployment
gunicorn = "^21.2.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
fastapi = "^0.115.0"
prometheus-client = "^0.18.0"
# API dependencies
websockets = "^15.0"
strawberry-graphql = "^0.215.0"
pyjwt = "^2.8.0"
passlib = "^1.7.4"
python-multipart = "^0.0.6"
# Tracing & Monitoring
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation = "^0.42b0"
# jaeger-client = "^4.8.0"  # Commented out - thrift dependency issue
statsd = "^4.0.1"

[tool.poetry.scripts]
qframe = "qframe.apps.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ================================
# TOOLS CONFIGURATION
# ================================

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Third party libraries without types
[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "binance.*",
    "ta.*",
    "mlflow.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=qframe --cov-branch --cov-report=term-missing --cov-report=html:htmlcov --cov-fail-under=75"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "performance: marks performance tests",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "ui: marks UI component tests",
    "backtesting: marks backtesting specific tests",
    "strategies: marks strategy tests",
    "data: marks data provider tests",
    "risk: marks risk management tests",
    "critical: marks critical production tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:.*streamlit.*:UserWarning",
    "ignore:.*plotly.*:UserWarning",
]

[tool.coverage.run]
branch = true
source = ["qframe"]
omit = [
    "tests/*",
    "qframe/apps/*",  # CLI apps
    "*/__init__.py",
    "*/conftest.py",
    "*/test_*.py",
    "*/_test.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "def __str__",
    "TYPE_CHECKING",
]
show_missing = true
precision = 2
skip_covered = false
fail_under = 75

# Configuration de coverage spécifique par module
[tool.coverage.paths]
source = [
    "qframe/",
    "*/qframe/",
]

# Targets de coverage par composant
[tool.coverage.html]
directory = "htmlcov"
title = "QFrame Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Configuration pour coverage avancée
[tool.coverage.json]
output = "coverage.json"
pretty_print = true