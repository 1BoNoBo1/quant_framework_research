#!/usr/bin/env python3
"""
Test simple de la strat√©gie Adaptive Mean Reversion.
"""

import sys
from pathlib import Path
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from unittest.mock import Mock

# Add project root to path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from qframe.strategies.research.adaptive_mean_reversion_strategy import AdaptiveMeanReversionStrategy
from qframe.strategies.research.adaptive_mean_reversion_config import AdaptiveMeanReversionConfig

def create_test_data(n_points=200):
    """Cr√©er des donn√©es de test r√©alistes."""
    dates = pd.date_range('2023-01-01', periods=n_points, freq='h')
    np.random.seed(42)

    # G√©n√©rer des prix r√©alistes avec mean reversion
    base_price = 50000
    returns = np.random.normal(0, 0.02, n_points)

    # Ajouter du mean reversion
    mean_reversion_component = np.sin(np.linspace(0, 4*np.pi, n_points)) * 0.03
    returns += mean_reversion_component

    prices = base_price * np.exp(np.cumsum(returns))

    data = pd.DataFrame({
        'open': np.roll(prices, 1),
        'high': prices * (1 + np.abs(np.random.normal(0, 0.005, n_points))),
        'low': prices * (1 - np.abs(np.random.normal(0, 0.005, n_points))),
        'close': prices,
        'volume': np.random.lognormal(15, 0.5, n_points)
    }, index=dates)

    data.loc[data.index[0], 'open'] = data.loc[data.index[0], 'close']
    return data

def test_strategy():
    """Test simple de la strat√©gie."""
    print("üöÄ Test de la strat√©gie Adaptive Mean Reversion")

    # Configuration
    config = AdaptiveMeanReversionConfig(
        universe=["BTC/USDT"],
        min_data_points=50,
        signal_threshold=0.01
    )

    # Mocks
    mock_data_provider = Mock()
    mock_risk_manager = Mock()

    # Cr√©er la strat√©gie
    strategy = AdaptiveMeanReversionStrategy(
        data_provider=mock_data_provider,
        risk_manager=mock_risk_manager,
        config=config
    )

    print(f"‚úÖ Strat√©gie initialis√©e: {strategy.get_name()}")

    # Cr√©er des donn√©es de test
    test_data = create_test_data(150)
    print(f"üìä Donn√©es de test cr√©√©es: {len(test_data)} points")

    # G√©n√©rer des signaux
    try:
        signals = strategy.generate_signals(test_data)
        print(f"üìà Signaux g√©n√©r√©s: {len(signals)}")

        if signals:
            for i, signal in enumerate(signals[:3]):  # Afficher les 3 premiers
                print(f"  Signal {i+1}: {signal.action.value} {signal.symbol} "
                      f"strength={signal.strength:.3f} "
                      f"regime={signal.metadata.get('regime', 'unknown')}")
        else:
            print("  Aucun signal g√©n√©r√©")

        # Test de l'information de la strat√©gie
        info = strategy.get_strategy_info()
        print(f"üìã Info strat√©gie: {info['name']}, r√©gime actuel: {info.get('current_regime', 'unknown')}")

        # Test des features
        features = strategy._engineer_features(test_data)
        print(f"üîß Features cr√©√©es: {len(features.columns)} colonnes")
        print(f"   Exemples: {list(features.columns[:5])}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration():
    """Test de la configuration."""
    print("\nüîß Test de la configuration")

    try:
        # Configuration valide
        config = AdaptiveMeanReversionConfig()
        print(f"‚úÖ Configuration par d√©faut: {config.name}")

        # Test des validations
        config_custom = AdaptiveMeanReversionConfig(
            universe=["BTC/USDT", "ETH/USDT"],
            mean_reversion_windows=[5, 10, 20],
            signal_threshold=0.05
        )
        print(f"‚úÖ Configuration personnalis√©e valid√©e")

        return True

    except Exception as e:
        print(f"‚ùå Erreur de configuration: {str(e)}")
        return False

def main():
    """Point d'entr√©e principal."""
    print("="*60)
    print("üß™ TESTS DE LA STRAT√âGIE ADAPTIVE MEAN REVERSION")
    print("="*60)

    # Test de configuration
    config_ok = test_configuration()

    # Test de la strat√©gie
    strategy_ok = test_strategy()

    print("\n" + "="*60)
    if config_ok and strategy_ok:
        print("üéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ La strat√©gie Adaptive Mean Reversion est fonctionnelle")
        print("\nCaract√©ristiques:")
        print("- D√©tection de r√©gimes ML (LSTM + Random Forest)")
        print("- Mean reversion adaptatif par r√©gime")
        print("- Features symboliques int√©gr√©es")
        print("- Position sizing avec Kelly Criterion")
        print("- Gestion des risques dynamique")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        if not config_ok:
            print("   - Probl√®me de configuration")
        if not strategy_ok:
            print("   - Probl√®me de strat√©gie")
    print("="*60)

if __name__ == "__main__":
    main()