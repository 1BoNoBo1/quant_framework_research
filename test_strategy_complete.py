#!/usr/bin/env python3
"""
üéØ Test Workflow Complet d'une Strat√©gie Sp√©cifique
================================================

Test approfondi d'une strat√©gie pour validation compl√®te du workflow.
"""

import asyncio
from datetime import datetime, timedelta
import pandas as pd
import numpy as np

def generate_synthetic_data(symbol: str = "BTC/USD", days: int = 30) -> pd.DataFrame:
    """G√©n√®re des donn√©es OHLCV synth√©tiques r√©alistes."""

    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)
    dates = pd.date_range(start=start_date, end=end_date, freq='1h')

    np.random.seed(42)
    returns = np.random.normal(0.0001, 0.02, len(dates))

    # Ajouter tendance et cycles r√©alistes
    trend = np.linspace(0, 0.1, len(dates))
    daily_cycle = 0.01 * np.sin(np.arange(len(dates)) * 2 * np.pi / 24)
    weekly_cycle = 0.02 * np.sin(np.arange(len(dates)) * 2 * np.pi / (24 * 7))

    returns = returns + trend / len(dates) + daily_cycle / len(dates) + weekly_cycle / len(dates)

    prices = 45000 * np.cumprod(1 + returns)

    data = []
    for i, (date, price) in enumerate(zip(dates, prices)):
        volatility = max(0.005, 0.01 + 0.01 * np.sin(i / 100))

        high_offset = np.random.uniform(0, volatility)
        low_offset = -np.random.uniform(0, volatility)

        open_price = price * (1 + np.random.uniform(-volatility/2, volatility/2))
        high_price = price * (1 + high_offset)
        low_price = price * (1 + low_offset)
        close_price = price

        # Volume avec patterns r√©alistes
        base_volume = 100 + 50 * np.sin(i / 24)  # Cycle daily
        volume_spike = np.random.exponential(1) if np.random.random() < 0.05 else 1  # Spikes occasionnels
        volume = max(10, base_volume * volume_spike + np.random.uniform(-20, 50))

        data.append({
            'timestamp': date,
            'open': round(open_price, 2),
            'high': round(high_price, 2),
            'low': round(low_price, 2),
            'close': round(close_price, 2),
            'volume': round(volume, 2),
            'symbol': symbol
        })

    return pd.DataFrame(data)

class MockDataProvider:
    """Mock DataProvider for comprehensive testing."""

    async def fetch_ohlcv(self, symbol, timeframe, limit=1000, start_time=None, end_time=None):
        return generate_synthetic_data(symbol, days=60)  # Plus de donn√©es pour ML

    async def fetch_latest_price(self, symbol):
        return 45000.0

class MockRiskManager:
    """Mock RiskManager with realistic behavior."""

    def calculate_position_size(self, signal, portfolio_value, current_positions):
        # Position sizing bas√© sur la volatilit√© et le signal
        base_size = 0.02  # 2% du portfolio
        signal_strength = getattr(signal, 'strength', 0.5)
        return base_size * signal_strength * portfolio_value

    def check_risk_limits(self, signal, current_positions):
        # V√©rification simplifi√©e des limites
        total_exposure = sum(abs(p.size) for p in current_positions)
        return total_exposure < 0.5  # Max 50% exposition

async def test_adaptive_mean_reversion_complete():
    """Test complet de la strat√©gie AdaptiveMeanReversion."""

    print("üéØ TEST COMPLET - AdaptiveMeanReversionStrategy")
    print("=" * 55)
    print(f"‚è±Ô∏è D√©but: {datetime.now().strftime('%H:%M:%S')}\n")

    try:
        # Import de la strat√©gie
        from qframe.strategies.research.adaptive_mean_reversion_strategy import (
            AdaptiveMeanReversionStrategy,
            AdaptiveMeanReversionConfig
        )

        # 1. Configuration
        print("‚öôÔ∏è Configuration de la strat√©gie...")
        config = AdaptiveMeanReversionConfig(
            lookback_short=10,
            lookback_long=50,
            z_entry_base=1.5,  # Seuils plus r√©alistes
            z_exit_base=0.5,
            position_size=0.02,
            use_ml_optimization=True
        )
        print("   ‚úÖ Configuration cr√©√©e")

        # 2. Mocks
        mock_provider = MockDataProvider()
        mock_risk = MockRiskManager()
        print("   ‚úÖ Mocks cr√©√©s")

        # 3. Instantiation
        print("\nüèóÔ∏è Instantiation de la strat√©gie...")
        strategy = AdaptiveMeanReversionStrategy(mock_provider, mock_risk, config)
        print("   ‚úÖ Strat√©gie instanci√©e avec succ√®s")
        print(f"   üìõ Nom: {strategy.get_name()}")

        # 4. G√©n√©ration de donn√©es
        print("\nüìä G√©n√©ration de donn√©es de test...")
        data = generate_synthetic_data("BTC/USDT", days=60)  # Plus de donn√©es
        print(f"   ‚úÖ {len(data)} points de donn√©es g√©n√©r√©s")
        print(f"   üìà Prix range: {data['close'].min():.2f} - {data['close'].max():.2f}")
        print(f"   üìä Volume moyen: {data['volume'].mean():.2f}")

        # 5. Test g√©n√©ration de signaux
        print("\nüéØ G√©n√©ration de signaux...")

        import time
        start_time = time.time()

        signals = strategy.generate_signals(data)

        generation_time = time.time() - start_time

        if signals and len(signals) > 0:
            print(f"   ‚úÖ {len(signals)} signaux g√©n√©r√©s en {generation_time:.3f}s")

            # Analyse des signaux
            signal_values = [s.signal for s in signals]
            confidences = [s.confidence for s in signals]
            regimes = [s.regime for s in signals]

            # Statistiques
            positive_signals = sum(1 for s in signal_values if s > 0)
            negative_signals = sum(1 for s in signal_values if s < 0)
            neutral_signals = len(signals) - positive_signals - negative_signals

            print(f"\nüìä ANALYSE DES SIGNAUX:")
            print(f"   üìà Signaux positifs (BUY): {positive_signals}")
            print(f"   üìâ Signaux n√©gatifs (SELL): {negative_signals}")
            print(f"   ‚û°Ô∏è Signaux neutres: {neutral_signals}")

            print(f"\nüí™ CONFIDENCE:")
            print(f"   üéØ Moyenne: {np.mean(confidences):.3f}")
            print(f"   üìä Range: {np.min(confidences):.3f} - {np.max(confidences):.3f}")

            print(f"\nüåç R√âGIMES D√âTECT√âS:")
            regime_counts = {}
            for regime in regimes:
                regime_counts[regime] = regime_counts.get(regime, 0) + 1
            for regime, count in regime_counts.items():
                print(f"   {regime}: {count} signaux ({count/len(signals)*100:.1f}%)")

            # Test des premiers signaux
            print(f"\nüîç PREMIERS SIGNAUX:")
            for i, signal in enumerate(signals[:5]):
                action = "BUY" if signal.signal > 0 else "SELL" if signal.signal < 0 else "HOLD"
                print(f"   {i+1}. {action} | Force: {abs(signal.signal):.3f} | Conf: {signal.confidence:.3f} | R√©gime: {signal.regime}")

        else:
            print("   ‚ùå Aucun signal g√©n√©r√©")
            return False

        # 6. Test m√©triques de performance
        print(f"\nüìä M√âTRIQUES DE PERFORMANCE:")
        print(f"   ‚ö° G√©n√©ration: {generation_time:.3f}s pour {len(data)} points")
        print(f"   üéØ Ratio signaux/donn√©es: {len(signals)/len(data)*100:.1f}%")
        print(f"   üí® Vitesse: {len(data)/generation_time:.0f} points/seconde")

        # 7. Test de robustesse
        print(f"\nüõ°Ô∏è TEST DE ROBUSTESSE:")

        # Test avec donn√©es manquantes
        data_with_gaps = data.copy()
        data_with_gaps.loc[10:15, 'close'] = np.nan

        try:
            robust_signals = strategy.generate_signals(data_with_gaps)
            print(f"   ‚úÖ Gestion donn√©es manquantes: {len(robust_signals)} signaux")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Probl√®me donn√©es manquantes: {e}")

        # Test avec donn√©es extr√™mes
        extreme_data = data.copy()
        extreme_data.loc[20:25, 'close'] *= 2  # Spike de prix

        try:
            extreme_signals = strategy.generate_signals(extreme_data)
            print(f"   ‚úÖ Gestion prix extr√™mes: {len(extreme_signals)} signaux")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Probl√®me prix extr√™mes: {e}")

        print(f"\n" + "=" * 55)
        print("üéâ TEST COMPLET R√âUSSI!")
        print("=" * 55)
        print(f"‚úÖ Strat√©gie AdaptiveMeanReversion 100% fonctionnelle")
        print(f"üìä {len(signals)} signaux g√©n√©r√©s avec succ√®s")
        print(f"üß† D√©tection de r√©gime: {len(set(regimes))} r√©gimes identifi√©s")
        print(f"‚ö° Performance: {len(data)/generation_time:.0f} points/seconde")
        print(f"üí™ Robustesse: Gestion donn√©es manquantes et extr√™mes")

        print(f"\nüéØ RECOMMANDATIONS:")
        if len(signals) > len(data) * 0.1:
            print("‚úÖ Taux de g√©n√©ration de signaux excellent")
        else:
            print("‚ö†Ô∏è Consid√©rer ajuster les seuils pour plus de signaux")

        if np.mean(confidences) > 0.6:
            print("‚úÖ Niveau de confiance √©lev√© des signaux")
        else:
            print("‚ö†Ô∏è Niveau de confiance moyen, v√©rifier calibration")

        print(f"\n‚è±Ô∏è Fin: {datetime.now().strftime('%H:%M:%S')}")

        return True

    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Point d'entr√©e principal."""
    success = await test_adaptive_mean_reversion_complete()
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)