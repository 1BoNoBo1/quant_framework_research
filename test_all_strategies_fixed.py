#!/usr/bin/env python3
"""
üöÄ PHASE 3 - Validation et Correction des 4 Strat√©gies Restantes
==============================================================

Objectif: D√©bloquer MeanReversion, FundingArbitrage, DMN LSTM et RL Alpha
M√©thode: Analyser et corriger les param√®tres pour g√©n√©ration de signaux
Validation: Int√©grer chaque strat√©gie corrig√©e dans le pipeline de backtesting
"""

import asyncio
import sys
from datetime import datetime, timedelta, timezone
import pandas as pd
import numpy as np
from decimal import Decimal
from typing import List, Dict, Any, Optional
import logging
import time

print("üöÄ PHASE 3 - CORRECTION ET VALIDATION DES 4 STRAT√âGIES")
print("=" * 60)
print(f"‚è±Ô∏è D√©but: {datetime.now().strftime('%H:%M:%S')}\n")

async def get_test_data(symbol: str = "BTC/USDT", days: int = 15) -> Optional[pd.DataFrame]:
    """R√©cup√®re des donn√©es de test pour les strat√©gies."""

    print(f"üìä R√âCUP√âRATION DONN√âES TEST")
    print("-" * 30)

    try:
        from qframe.infrastructure.data.ccxt_provider import CCXTProvider

        provider = CCXTProvider(exchange_name='binance')
        await provider.connect()

        data_points = await provider.get_klines(
            symbol=symbol,
            interval='1h',
            limit=days * 24
        )

        if not data_points:
            return None

        data = pd.DataFrame([
            {
                'timestamp': dp.timestamp,
                'open': float(dp.open),
                'high': float(dp.high),
                'low': float(dp.low),
                'close': float(dp.close),
                'volume': float(dp.volume),
                'symbol': symbol
            } for dp in data_points
        ])

        data = data.sort_values('timestamp').reset_index(drop=True)
        data['datetime'] = pd.to_datetime(data['timestamp'], unit='s')
        data.set_index('datetime', inplace=True)

        print(f"   ‚úÖ {len(data)} points r√©cup√©r√©s")
        print(f"   üìä Prix: ${data['close'].min():.0f} - ${data['close'].max():.0f}")

        return data

    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return None

async def test_mean_reversion_strategy(data: pd.DataFrame) -> Dict:
    """Test et correction de MeanReversionStrategy."""

    print(f"\nüéØ 1. MEAN REVERSION STRATEGY")
    print("-" * 32)

    result = {
        "name": "MeanReversion",
        "status": "failed",
        "signals": 0,
        "error": None,
        "fixed": False
    }

    try:
        from qframe.strategies.research.mean_reversion_strategy import (
            MeanReversionStrategy, MeanReversionConfig
        )

        print("   ‚úÖ Import r√©ussi")

        # Configuration par d√©faut
        try:
            default_config = MeanReversionConfig()
            default_strategy = MeanReversionStrategy(config=default_config)
            default_signals = default_strategy.generate_signals(data)

            print(f"   üìä Config par d√©faut: {len(default_signals)} signaux")

            if len(default_signals) == 0:
                print("   üîß Signaux insuffisants - Ajustement des param√®tres...")

                # Configuration ajust√©e pour plus de signaux
                adjusted_config = MeanReversionConfig(
                    # R√©duire les seuils pour plus de sensibilit√©
                    z_score_threshold=1.0,  # Plus bas que d√©faut (probablement 2.0)
                    lookback_period=10,     # Plus court pour plus de r√©activit√©
                    volatility_threshold=0.01,  # Plus bas
                    min_signal_strength=0.005   # Plus bas
                )

                adjusted_strategy = MeanReversionStrategy(config=adjusted_config)
                adjusted_signals = adjusted_strategy.generate_signals(data)

                print(f"   üéØ Config ajust√©e: {len(adjusted_signals)} signaux")

                if len(adjusted_signals) > 0:
                    result["status"] = "fixed"
                    result["signals"] = len(adjusted_signals)
                    result["fixed"] = True

                    # Analyser les signaux
                    if hasattr(adjusted_signals[0], 'action'):
                        actions = [s.action.value for s in adjusted_signals[:5]]
                        print(f"      üéØ Premiers signaux: {actions}")

                    print("   ‚úÖ MeanReversion corrig√©e et op√©rationnelle!")
                else:
                    print("   ‚ö†Ô∏è Ajustements insuffisants")
            else:
                result["status"] = "working"
                result["signals"] = len(default_signals)
                print("   ‚úÖ Fonctionne avec config par d√©faut")

        except Exception as config_error:
            # Essayer sans configuration
            try:
                basic_strategy = MeanReversionStrategy()
                basic_signals = basic_strategy.generate_signals(data)
                print(f"   üìä Sans config: {len(basic_signals)} signaux")

                if len(basic_signals) > 0:
                    result["status"] = "working"
                    result["signals"] = len(basic_signals)
                else:
                    result["error"] = f"Config error: {config_error}"

            except Exception as basic_error:
                result["error"] = f"Basic error: {basic_error}"

    except ImportError as e:
        result["error"] = f"Import failed: {e}"
        print(f"   ‚ùå Import √©chou√©: {e}")
    except Exception as e:
        result["error"] = f"Unexpected: {e}"
        print(f"   ‚ùå Erreur inattendue: {e}")

    return result

async def test_funding_arbitrage_strategy(data: pd.DataFrame) -> Dict:
    """Test et correction de FundingArbitrageStrategy."""

    print(f"\nüí∞ 2. FUNDING ARBITRAGE STRATEGY")
    print("-" * 36)

    result = {
        "name": "FundingArbitrage",
        "status": "failed",
        "signals": 0,
        "error": None,
        "fixed": False
    }

    try:
        from qframe.strategies.research.funding_arbitrage_strategy import (
            FundingArbitrageStrategy, FundingArbitrageConfig
        )

        print("   ‚úÖ Import r√©ussi")

        # Mock funding rates data pour le test
        def create_mock_funding_data(base_data):
            """Cr√©e des donn√©es de funding rates mock√©es."""
            mock_funding = base_data.copy()
            # Ajouter funding rates simul√©s
            mock_funding['funding_rate'] = np.random.normal(0.0001, 0.0005, len(base_data))
            mock_funding['predicted_funding'] = mock_funding['funding_rate'] * 1.1
            return mock_funding

        mock_data = create_mock_funding_data(data)
        print("   üìä Donn√©es funding mock√©es cr√©√©es")

        try:
            # Test avec config par d√©faut
            config = FundingArbitrageConfig()
            strategy = FundingArbitrageStrategy(config=config)

            # La strat√©gie pourrait avoir besoin de funding rates
            signals = strategy.generate_signals(mock_data)

            print(f"   üìä Signaux g√©n√©r√©s: {len(signals)}")

            if len(signals) > 0:
                result["status"] = "working"
                result["signals"] = len(signals)
                print("   ‚úÖ FundingArbitrage op√©rationnelle!")
            else:
                print("   üîß Ajustement des seuils de funding...")

                # Configuration plus sensible
                adjusted_config = FundingArbitrageConfig(
                    funding_threshold=0.0001,      # Seuil tr√®s bas
                    max_position_size=0.01,        # Position plus petite
                    position_size=0.01,            # Position par d√©faut
                    use_ml_prediction=False        # D√©sactiver ML pour test rapide
                )

                adjusted_strategy = FundingArbitrageStrategy(config=adjusted_config)
                adjusted_signals = adjusted_strategy.generate_signals(mock_data)

                if len(adjusted_signals) > 0:
                    result["status"] = "fixed"
                    result["signals"] = len(adjusted_signals)
                    result["fixed"] = True
                    print("   ‚úÖ FundingArbitrage corrig√©e!")
                else:
                    result["error"] = "Seuils trop √©lev√©s m√™me apr√®s ajustement"

        except Exception as strategy_error:
            # Essayer instanciation basique
            try:
                basic_strategy = FundingArbitrageStrategy()
                basic_signals = basic_strategy.generate_signals(mock_data)

                if len(basic_signals) > 0:
                    result["status"] = "working"
                    result["signals"] = len(basic_signals)
                else:
                    result["error"] = f"No signals: {strategy_error}"

            except Exception as basic_error:
                result["error"] = f"Basic instantiation failed: {basic_error}"

    except ImportError as e:
        result["error"] = f"Import failed: {e}"
        print(f"   ‚ùå Import √©chou√©: {e}")
    except Exception as e:
        result["error"] = f"Unexpected: {e}"
        print(f"   ‚ùå Erreur: {e}")

    return result

async def test_dmn_lstm_strategy(data: pd.DataFrame) -> Dict:
    """Test et correction de DMNLSTMStrategy."""

    print(f"\nüß† 3. DMN LSTM STRATEGY")
    print("-" * 23)

    result = {
        "name": "DMN_LSTM",
        "status": "failed",
        "signals": 0,
        "error": None,
        "fixed": False
    }

    try:
        from qframe.strategies.research.dmn_lstm_strategy import (
            DMNLSTMStrategy, DMNConfig
        )

        print("   ‚úÖ Import r√©ussi")

        try:
            # Configuration adapt√©e pour test rapide
            config = DMNConfig(
                window_size=20,        # Plus petit pour test
                hidden_size=16,        # Tr√®s petit pour test rapide
                num_layers=1,          # Plus simple
                epochs=10,             # Tr√®s peu d'epochs pour test
                learning_rate=0.01,    # Plus √©lev√© pour convergence rapide
                signal_threshold=0.01, # Seuil bas pour plus de signaux
                use_attention=False,   # D√©sactiver attention pour simplicit√©
                batch_size=16          # Plus petit batch
            )

            strategy = DMNLSTMStrategy(config=config)

            # G√©n√©rer signaux (peut prendre du temps pour ML)
            print("   üîÑ Entra√Ænement mod√®le et g√©n√©ration signaux...")
            start_time = time.time()

            signals = strategy.generate_signals(data)

            training_time = time.time() - start_time
            print(f"   ‚è±Ô∏è Temps d'entra√Ænement: {training_time:.2f}s")
            print(f"   üìä Signaux g√©n√©r√©s: {len(signals)}")

            if len(signals) > 0:
                result["status"] = "working"
                result["signals"] = len(signals)
                print("   ‚úÖ DMN LSTM op√©rationnelle!")

                # Analyser qualit√© signaux
                if hasattr(signals[0], 'confidence'):
                    confidences = [s.confidence for s in signals[:5]]
                    print(f"      üí™ Confidences: {confidences}")
            else:
                print("   üîß Mod√®le n√©cessite plus d'entra√Ænement ou donn√©es")
                result["error"] = "Mod√®le non entra√Æn√© ou seuils trop √©lev√©s"

        except Exception as strategy_error:
            print(f"   ‚ö†Ô∏è Erreur strat√©gie: {strategy_error}")

            # Essayer sans config
            try:
                basic_strategy = DMNLSTMStrategy()
                basic_signals = basic_strategy.generate_signals(data)

                if len(basic_signals) > 0:
                    result["status"] = "working"
                    result["signals"] = len(basic_signals)
                else:
                    result["error"] = f"Strategy error: {strategy_error}"

            except Exception as basic_error:
                result["error"] = f"Basic failed: {basic_error}"

    except ImportError as e:
        result["error"] = f"Import failed: {e}"
        print(f"   ‚ùå Import √©chou√©: {e}")
    except Exception as e:
        result["error"] = f"Unexpected: {e}"
        print(f"   ‚ùå Erreur: {e}")

    return result

async def test_rl_alpha_strategy(data: pd.DataFrame) -> Dict:
    """Test et correction de RLAlphaStrategy."""

    print(f"\nü§ñ 4. RL ALPHA STRATEGY")
    print("-" * 23)

    result = {
        "name": "RL_Alpha",
        "status": "failed",
        "signals": 0,
        "error": None,
        "fixed": False
    }

    try:
        from qframe.strategies.research.rl_alpha_strategy import RLAlphaStrategy

        print("   ‚úÖ Import r√©ussi")

        try:
            # Instanciation basique d'abord
            strategy = RLAlphaStrategy()

            print("   üîÑ G√©n√©ration d'alphas RL...")
            start_time = time.time()

            signals = strategy.generate_signals(data)

            generation_time = time.time() - start_time
            print(f"   ‚è±Ô∏è Temps de g√©n√©ration: {generation_time:.2f}s")
            print(f"   üìä Signaux g√©n√©r√©s: {len(signals)}")

            if len(signals) > 0:
                result["status"] = "working"
                result["signals"] = len(signals)
                print("   ‚úÖ RL Alpha op√©rationnelle!")

                # Analyser alphas g√©n√©r√©s
                if hasattr(signals[0], 'alpha_formula'):
                    formulas = [getattr(s, 'alpha_formula', 'N/A') for s in signals[:3]]
                    print(f"      üßÆ Formules: {formulas}")
            else:
                print("   üîß Agent RL n√©cessite pr√©-entra√Ænement")
                result["error"] = "Agent RL non entra√Æn√©"

        except Exception as strategy_error:
            print(f"   ‚ö†Ô∏è Erreur strat√©gie: {strategy_error}")
            result["error"] = f"Strategy error: {strategy_error}"

    except ImportError as e:
        result["error"] = f"Import failed: {e}"
        print(f"   ‚ùå Import √©chou√©: {e}")
    except Exception as e:
        result["error"] = f"Unexpected: {e}"
        print(f"   ‚ùå Erreur: {e}")

    return result

def analyze_strategy_results(results: List[Dict]) -> Dict:
    """Analyse les r√©sultats des tests de strat√©gies."""

    total_strategies = len(results)
    working_strategies = sum(1 for r in results if r["status"] in ["working", "fixed"])
    fixed_strategies = sum(1 for r in results if r["fixed"])
    total_signals = sum(r["signals"] for r in results)

    analysis = {
        "total": total_strategies,
        "working": working_strategies,
        "fixed": fixed_strategies,
        "failed": total_strategies - working_strategies,
        "total_signals": total_signals,
        "success_rate": (working_strategies / total_strategies * 100) if total_strategies > 0 else 0
    }

    return analysis

async def main():
    """Point d'entr√©e principal Phase 3."""

    try:
        print("üéØ OBJECTIF: D√©bloquer les 4 strat√©gies restantes")
        print("üîß M√âTHODE: Analyser et corriger les param√®tres")
        print("‚úÖ VALIDATION: G√©n√©ration de signaux fonctionnelle\n")

        # R√©cup√©rer donn√©es de test
        data = await get_test_data("BTC/USDT", days=15)

        if data is None or len(data) < 50:
            print("‚ùå Donn√©es insuffisantes")
            return False

        # Tester chaque strat√©gie
        results = []

        # 1. MeanReversion
        mr_result = await test_mean_reversion_strategy(data)
        results.append(mr_result)

        # 2. FundingArbitrage
        fa_result = await test_funding_arbitrage_strategy(data)
        results.append(fa_result)

        # 3. DMN LSTM
        dmn_result = await test_dmn_lstm_strategy(data)
        results.append(dmn_result)

        # 4. RL Alpha
        rl_result = await test_rl_alpha_strategy(data)
        results.append(rl_result)

        # Analyser r√©sultats
        analysis = analyze_strategy_results(results)

        # Rapport final
        print(f"\n" + "=" * 60)
        print("üéØ R√âSULTATS PHASE 3")
        print("=" * 60)

        print(f"üìä STRAT√âGIES TEST√âES: {analysis['total']}")
        print(f"‚úÖ OP√âRATIONNELLES: {analysis['working']}")
        print(f"üîß CORRIG√âES: {analysis['fixed']}")
        print(f"‚ùå √âCHOU√âES: {analysis['failed']}")
        print(f"üìà SIGNAUX TOTAUX: {analysis['total_signals']}")
        print(f"üíØ TAUX SUCC√àS: {analysis['success_rate']:.1f}%")

        print(f"\nüìã D√âTAIL PAR STRAT√âGIE:")
        for result in results:
            status_emoji = "‚úÖ" if result["status"] in ["working", "fixed"] else "‚ùå"
            fixed_text = " (CORRIG√âE)" if result["fixed"] else ""
            print(f"   {status_emoji} {result['name']}: {result['signals']} signaux{fixed_text}")
            if result["error"]:
                print(f"      ‚ö†Ô∏è {result['error']}")

        # Recommandations
        print(f"\nüöÄ PROCHAINES √âTAPES:")

        if analysis["working"] > 0:
            print(f"‚úÖ {analysis['working']} strat√©gies op√©rationnelles")
            print("   ‚Üí Int√©grer dans pipeline de backtesting")
            print("   ‚Üí Tests walk-forward et Monte Carlo")

        if analysis["failed"] > 0:
            print(f"üîß {analysis['failed']} strat√©gies n√©cessitent corrections")
            print("   ‚Üí Analyser param√®tres en d√©tail")
            print("   ‚Üí Entra√Ænement mod√®les ML/RL")

        success = analysis["working"] >= 2  # Au moins 2 strat√©gies fonctionnelles
        print(f"\n‚è±Ô∏è Fin: {datetime.now().strftime('%H:%M:%S')}")

        return success

    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE PHASE 3: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # R√©duire bruit logging
    logging.getLogger('ccxt').setLevel(logging.WARNING)

    # Ex√©cuter Phase 3
    success = asyncio.run(main())
    sys.exit(0 if success else 1)