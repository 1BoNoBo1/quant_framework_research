#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Workflow Optimizer - Optimise le workflow pour de meilleures performances
D√©tecte les goulots d'√©tranglement et propose des am√©liorations
"""

import json
import logging
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import psutil
import subprocess

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class WorkflowOptimizer:
    """Optimiseur de workflow avec monitoring des performances"""

    def __init__(self):
        self.start_time = None
        self.metrics = {
            "workflow_start": None,
            "workflow_end": None,
            "total_duration": 0,
            "phases": {},
            "system_metrics": {},
            "recommendations": []
        }

    def start_monitoring(self):
        """D√©marre le monitoring du workflow"""
        self.start_time = time.time()
        self.metrics["workflow_start"] = datetime.now().isoformat()

        # M√©triques syst√®me initiales
        self.metrics["system_metrics"]["start"] = {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "available_memory_gb": psutil.virtual_memory().available / (1024**3),
            "disk_usage_percent": psutil.disk_usage('/').percent
        }

        logger.info("üöÄ Monitoring workflow d√©marr√©")
        return self.start_time

    def measure_phase(self, phase_name: str, command: str = None):
        """Mesure les performances d'une phase"""
        phase_start = time.time()

        logger.info(f"üìä D√©but phase: {phase_name}")

        if command:
            try:
                # Ex√©cution de la commande avec monitoring
                process = subprocess.Popen(
                    command,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )

                # Monitoring pendant l'ex√©cution
                cpu_samples = []
                memory_samples = []

                while process.poll() is None:
                    cpu_samples.append(psutil.cpu_percent())
                    memory_samples.append(psutil.virtual_memory().percent)
                    time.sleep(1)

                stdout, stderr = process.communicate()
                phase_duration = time.time() - phase_start

                # Stockage des m√©triques
                self.metrics["phases"][phase_name] = {
                    "duration": phase_duration,
                    "success": process.returncode == 0,
                    "avg_cpu": sum(cpu_samples) / len(cpu_samples) if cpu_samples else 0,
                    "max_cpu": max(cpu_samples) if cpu_samples else 0,
                    "avg_memory": sum(memory_samples) / len(memory_samples) if memory_samples else 0,
                    "max_memory": max(memory_samples) if memory_samples else 0,
                    "return_code": process.returncode,
                    "command": command
                }

                if process.returncode != 0:
                    logger.error(f"‚ùå √âchec phase {phase_name}: {stderr}")
                else:
                    logger.info(f"‚úÖ Phase {phase_name} termin√©e en {phase_duration:.1f}s")

                return process.returncode == 0

            except Exception as e:
                logger.error(f"‚ùå Erreur phase {phase_name}: {e}")
                return False

        return True

    def end_monitoring(self):
        """Termine le monitoring et g√©n√®re le rapport"""
        if self.start_time:
            self.metrics["workflow_end"] = datetime.now().isoformat()
            self.metrics["total_duration"] = time.time() - self.start_time

            # M√©triques syst√®me finales
            self.metrics["system_metrics"]["end"] = {
                "cpu_percent": psutil.cpu_percent(),
                "memory_percent": psutil.virtual_memory().percent,
                "available_memory_gb": psutil.virtual_memory().available / (1024**3),
                "disk_usage_percent": psutil.disk_usage('/').percent
            }

            # G√©n√©ration des recommandations
            self._generate_recommendations()

            logger.info(f"‚è±Ô∏è Workflow termin√© en {self.metrics['total_duration']:.1f}s")

    def _generate_recommendations(self):
        """G√©n√®re des recommandations d'optimisation"""
        recommendations = []

        # Analyse des phases les plus lentes
        if self.metrics["phases"]:
            phase_durations = {name: data["duration"] for name, data in self.metrics["phases"].items()}
            slowest_phase = max(phase_durations, key=phase_durations.get)
            slowest_duration = phase_durations[slowest_phase]

            if slowest_duration > 60:  # Plus d'une minute
                recommendations.append(f"üêå Phase la plus lente: {slowest_phase} ({slowest_duration:.1f}s)")
                recommendations.append(f"üí° Consid√©rer la parall√©lisation de {slowest_phase}")

        # Analyse CPU
        high_cpu_phases = [
            name for name, data in self.metrics["phases"].items()
            if data.get("max_cpu", 0) > 80
        ]
        if high_cpu_phases:
            recommendations.append(f"üî• Phases intensives CPU: {', '.join(high_cpu_phases)}")
            recommendations.append("üí° R√©duire la concurrence ou optimiser les algorithmes")

        # Analyse m√©moire
        high_memory_phases = [
            name for name, data in self.metrics["phases"].items()
            if data.get("max_memory", 0) > 85
        ]
        if high_memory_phases:
            recommendations.append(f"üß† Phases intensives m√©moire: {', '.join(high_memory_phases)}")
            recommendations.append("üí° Traitement par batch ou optimisation m√©moire")

        # Analyse des √©checs
        failed_phases = [
            name for name, data in self.metrics["phases"].items()
            if not data.get("success", True)
        ]
        if failed_phases:
            recommendations.append(f"‚ùå Phases √©chou√©es: {', '.join(failed_phases)}")
            recommendations.append("üîß V√©rifier les d√©pendances et configurations")

        # Recommandations g√©n√©rales
        total_duration = self.metrics["total_duration"]
        if total_duration > 300:  # Plus de 5 minutes
            recommendations.append(f"‚è±Ô∏è Workflow long ({total_duration:.1f}s)")
            recommendations.append("üöÄ Envisager l'async ou la parall√©lisation globale")

        self.metrics["recommendations"] = recommendations

    def display_performance_report(self):
        """Affiche le rapport de performance"""
        print("\n" + "="*80)
        print("üöÄ WORKFLOW PERFORMANCE REPORT")
        print("="*80)

        print(f"‚è±Ô∏è Dur√©e totale: {self.metrics['total_duration']:.1f}s")
        print(f"üïê D√©but: {self.metrics['workflow_start']}")
        print(f"üèÅ Fin: {self.metrics['workflow_end']}")

        # Phases
        if self.metrics["phases"]:
            print(f"\nüìä PERFORMANCES PAR PHASE:")
            print("-" * 60)
            for phase_name, data in self.metrics["phases"].items():
                status = "‚úÖ" if data.get("success", True) else "‚ùå"
                duration = data.get("duration", 0)
                cpu = data.get("avg_cpu", 0)
                memory = data.get("avg_memory", 0)
                print(f"{status} {phase_name:20} | {duration:6.1f}s | CPU: {cpu:4.1f}% | MEM: {memory:4.1f}%")

        # M√©triques syst√®me
        start_sys = self.metrics["system_metrics"].get("start", {})
        end_sys = self.metrics["system_metrics"].get("end", {})

        print(f"\nüñ•Ô∏è M√âTRIQUES SYST√àME:")
        print("-" * 60)
        print(f"CPU d√©but/fin:    {start_sys.get('cpu_percent', 0):4.1f}% ‚Üí {end_sys.get('cpu_percent', 0):4.1f}%")
        print(f"M√©moire d√©but/fin: {start_sys.get('memory_percent', 0):4.1f}% ‚Üí {end_sys.get('memory_percent', 0):4.1f}%")
        print(f"M√©moire libre:     {end_sys.get('available_memory_gb', 0):4.1f}GB")

        # Recommandations
        if self.metrics["recommendations"]:
            print(f"\nüí° RECOMMANDATIONS D'OPTIMISATION:")
            print("-" * 60)
            for i, rec in enumerate(self.metrics["recommendations"], 1):
                print(f"{i}. {rec}")

        print("\n" + "="*80)

    def save_report(self, output_file: str = None):
        """Sauvegarde le rapport de performance"""
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"logs/workflow_performance_{timestamp}.json"

        Path(output_file).parent.mkdir(exist_ok=True)

        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(self.metrics, f, indent=2, ensure_ascii=False)

        logger.info(f"üìä Rapport sauv√©: {output_file}")
        return output_file

def optimize_workflow():
    """Ex√©cute le workflow optimis√© avec monitoring"""
    optimizer = WorkflowOptimizer()

    try:
        # D√©marrage monitoring
        optimizer.start_monitoring()

        # Phases du workflow optimis√©
        phases = [
            ("clean-cache", "make clean-cache"),
            ("mlflow-start", "make mlflow-start-bg"),
            ("pipeline-hybrid", "make pipeline-hybrid"),
            ("validation", "make validation-complete"),
            ("monitoring", "make monitor-portfolio"),
            ("export", "make features-export"),
            ("report", "make report-consolidate"),
            ("mlflow-stop", "make mlflow-stop")
        ]

        print("üöÄ D√âMARRAGE WORKFLOW OPTIMIS√â")
        print("="*50)

        success_count = 0
        for phase_name, command in phases:
            success = optimizer.measure_phase(phase_name, command)
            if success:
                success_count += 1
            else:
                logger.warning(f"‚ö†Ô∏è Phase {phase_name} √©chou√©e, continuation...")

        # Fin du monitoring
        optimizer.end_monitoring()

        # Affichage du rapport
        optimizer.display_performance_report()

        # Sauvegarde
        report_file = optimizer.save_report()

        print(f"\n‚úÖ Workflow termin√©: {success_count}/{len(phases)} phases r√©ussies")
        print(f"üìä Rapport d√©taill√©: {report_file}")

        return success_count == len(phases)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Workflow interrompu par l'utilisateur")
        optimizer.end_monitoring()
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur workflow: {e}")
        optimizer.end_monitoring()
        return False

if __name__ == "__main__":
    import sys
    success = optimize_workflow()
    sys.exit(0 if success else 1)