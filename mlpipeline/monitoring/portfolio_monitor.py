#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Portfolio Monitor - Monitoring final du portfolio
Synth√®se des performances, m√©triques et alertes en temps r√©el
"""

import json
import logging
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Optional
import pandas as pd
import numpy as np
import glob

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PortfolioMonitor:
    """Monitoring complet du portfolio quantitatif"""

    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.artifacts_dir = self.data_dir / "artifacts"
        self.logs_dir = Path("logs")

        # M√©triques de performance
        self.metrics = {
            "portfolio": {},
            "strategies": {},
            "risk": {},
            "execution": {},
            "alerts": []
        }

    def load_strategy_metrics(self) -> Dict[str, Any]:
        """Charge les m√©triques de toutes les strat√©gies"""
        strategy_metrics = {}

        # DMN Strategy
        dmn_files = list(self.artifacts_dir.glob("dmn_metrics_*.json"))
        for dmn_file in dmn_files:
            symbol = dmn_file.stem.split('_')[-1]
            try:
                with open(dmn_file, 'r') as f:
                    data = json.load(f)
                    strategy_metrics[f"DMN_{symbol}"] = data
                    logger.info(f"üìä DMN {symbol} m√©triques charg√©es")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur DMN {symbol}: {e}")

        # Mean Reversion Strategy
        mr_files = list(self.artifacts_dir.glob("mr_metrics_*.json"))
        for mr_file in mr_files:
            symbol = mr_file.stem.split('_')[-1]
            try:
                with open(mr_file, 'r') as f:
                    data = json.load(f)
                    strategy_metrics[f"MR_{symbol}"] = data
                    logger.info(f"üìä Mean Reversion {symbol} m√©triques charg√©es")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur MR {symbol}: {e}")

        # Alternative naming convention
        alt_mr_files = list(self.artifacts_dir.glob("mean_reversion_metrics_*.json"))
        for mr_file in alt_mr_files:
            symbol = mr_file.stem.split('_')[-1]
            strategy_key = f"MR_{symbol}"
            if strategy_key not in strategy_metrics:
                try:
                    with open(mr_file, 'r') as f:
                        data = json.load(f)
                        strategy_metrics[strategy_key] = data
                        logger.info(f"üìä Mean Reversion (alt) {symbol} m√©triques charg√©es")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur MR alt {symbol}: {e}")

        return strategy_metrics

    def load_signals_data(self) -> Dict[str, pd.DataFrame]:
        """Charge les donn√©es de signaux"""
        signals_data = {}

        # Mean Reversion signals
        mr_signals = list(self.artifacts_dir.glob("mr_signals_*.parquet"))
        for signal_file in mr_signals:
            symbol = signal_file.stem.split('_')[-1]
            try:
                df = pd.read_parquet(signal_file)
                signals_data[f"MR_signals_{symbol}"] = df
                logger.info(f"üìà Signaux MR {symbol} charg√©s ({len(df)} lignes)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur signaux MR {symbol}: {e}")

        return signals_data

    def load_regime_data(self) -> Dict[str, pd.DataFrame]:
        """Charge les donn√©es de r√©gimes de march√©"""
        regime_data = {}

        regime_files = list(self.artifacts_dir.glob("regime_states_*.parquet"))
        for regime_file in regime_files:
            symbol = regime_file.stem.split('_')[-1]
            try:
                df = pd.read_parquet(regime_file)
                regime_data[f"regime_{symbol}"] = df
                logger.info(f"üéØ R√©gimes {symbol} charg√©s ({len(df)} lignes)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur r√©gimes {symbol}: {e}")

        return regime_data

    def calculate_portfolio_metrics(self, strategy_metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Calcule les m√©triques agr√©g√©es du portfolio"""
        if not strategy_metrics:
            logger.warning("‚ö†Ô∏è Aucune m√©trique de strat√©gie disponible")
            return {}

        # Agr√©gation des m√©triques
        total_trades = 0
        total_pnl = 0
        sharpe_ratios = []
        max_drawdowns = []
        win_rates = []

        for strategy_name, metrics in strategy_metrics.items():
            if isinstance(metrics, dict):
                # Extraction m√©triques selon format
                trades = metrics.get('total_trades', metrics.get('trades_count', 0))
                pnl = metrics.get('total_pnl', metrics.get('pnl', 0))
                sharpe = metrics.get('sharpe_ratio', 0)
                max_dd = metrics.get('max_drawdown', metrics.get('max_dd', 0))
                win_rate = metrics.get('win_rate', 0)

                total_trades += trades
                total_pnl += pnl

                if sharpe != 0:
                    sharpe_ratios.append(sharpe)
                if max_dd != 0:
                    max_drawdowns.append(abs(max_dd))
                if win_rate != 0:
                    win_rates.append(win_rate)

        # Calculs agr√©g√©s
        portfolio_metrics = {
            "total_strategies": len(strategy_metrics),
            "total_trades": total_trades,
            "total_pnl": total_pnl,
            "avg_sharpe": np.mean(sharpe_ratios) if sharpe_ratios else 0,
            "max_sharpe": max(sharpe_ratios) if sharpe_ratios else 0,
            "min_sharpe": min(sharpe_ratios) if sharpe_ratios else 0,
            "avg_max_drawdown": np.mean(max_drawdowns) if max_drawdowns else 0,
            "worst_drawdown": max(max_drawdowns) if max_drawdowns else 0,
            "avg_win_rate": np.mean(win_rates) if win_rates else 0,
            "best_win_rate": max(win_rates) if win_rates else 0
        }

        return portfolio_metrics

    def analyze_risk_metrics(self, portfolio_metrics: Dict[str, Any],
                           strategy_metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Analyse des m√©triques de risque"""
        risk_analysis = {
            "risk_level": "UNKNOWN",
            "diversification_score": 0,
            "concentration_risk": 0,
            "drawdown_risk": "LOW",
            "performance_stability": 0,
            "alerts": []
        }

        if not portfolio_metrics:
            return risk_analysis

        # Analyse du drawdown
        avg_dd = portfolio_metrics.get("avg_max_drawdown", 0)
        worst_dd = portfolio_metrics.get("worst_drawdown", 0)

        if worst_dd > 0.3:  # 30%
            risk_analysis["drawdown_risk"] = "HIGH"
            risk_analysis["alerts"].append("‚ö†Ô∏è Drawdown max > 30%")
        elif worst_dd > 0.15:  # 15%
            risk_analysis["drawdown_risk"] = "MEDIUM"
        else:
            risk_analysis["drawdown_risk"] = "LOW"

        # Score de diversification
        num_strategies = portfolio_metrics.get("total_strategies", 0)
        if num_strategies >= 6:
            risk_analysis["diversification_score"] = 0.9
        elif num_strategies >= 4:
            risk_analysis["diversification_score"] = 0.7
        elif num_strategies >= 2:
            risk_analysis["diversification_score"] = 0.5
        else:
            risk_analysis["diversification_score"] = 0.2
            risk_analysis["alerts"].append("‚ö†Ô∏è Faible diversification")

        # Stabilit√© des performances
        sharpe_ratios = []
        for metrics in strategy_metrics.values():
            if isinstance(metrics, dict):
                sharpe = metrics.get('sharpe_ratio', 0)
                if sharpe != 0:
                    sharpe_ratios.append(sharpe)

        if sharpe_ratios:
            sharpe_std = np.std(sharpe_ratios)
            if sharpe_std < 0.5:
                risk_analysis["performance_stability"] = 0.8
            elif sharpe_std < 1.0:
                risk_analysis["performance_stability"] = 0.6
            else:
                risk_analysis["performance_stability"] = 0.3
                risk_analysis["alerts"].append("‚ö†Ô∏è Performance instable entre strat√©gies")

        # Niveau de risque global
        avg_sharpe = portfolio_metrics.get("avg_sharpe", 0)
        if avg_sharpe > 1.0 and risk_analysis["drawdown_risk"] == "LOW":
            risk_analysis["risk_level"] = "LOW"
        elif avg_sharpe > 0.5:
            risk_analysis["risk_level"] = "MEDIUM"
        else:
            risk_analysis["risk_level"] = "HIGH"

        return risk_analysis

    def check_execution_health(self) -> Dict[str, Any]:
        """V√©rifie la sant√© de l'ex√©cution"""
        execution_health = {
            "pipeline_status": "UNKNOWN",
            "last_execution": None,
            "success_rate": 0,
            "execution_time": 0,
            "issues": []
        }

        # Chercher le dernier rapport de pipeline
        pattern = str(self.logs_dir / "hybrid_pipeline_report_*.json")
        files = glob.glob(pattern)

        if files:
            latest_file = max(files, key=os.path.getctime)
            try:
                with open(latest_file, 'r') as f:
                    pipeline_data = json.load(f)

                execution_health["last_execution"] = pipeline_data.get("timestamp")
                execution_health["success_rate"] = pipeline_data.get("summary", {}).get("success_rate", 0)
                execution_health["execution_time"] = pipeline_data.get("execution_time", 0)

                if execution_health["success_rate"] == 1.0:
                    execution_health["pipeline_status"] = "HEALTHY"
                elif execution_health["success_rate"] > 0.8:
                    execution_health["pipeline_status"] = "DEGRADED"
                    execution_health["issues"].append("Taux de succ√®s < 100%")
                else:
                    execution_health["pipeline_status"] = "CRITICAL"
                    execution_health["issues"].append("Taux de succ√®s < 80%")

                logger.info(f"üìä Pipeline: {execution_health['pipeline_status']}")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lecture pipeline: {e}")
                execution_health["issues"].append(f"Erreur lecture pipeline: {e}")
        else:
            execution_health["issues"].append("Aucun rapport de pipeline trouv√©")

        return execution_health

    def generate_alerts(self, portfolio_metrics: Dict[str, Any],
                       risk_metrics: Dict[str, Any],
                       execution_health: Dict[str, Any]) -> List[str]:
        """G√©n√®re les alertes bas√©es sur les m√©triques"""
        alerts = []

        # Alertes portfolio
        if portfolio_metrics:
            if portfolio_metrics.get("avg_sharpe", 0) < 0:
                alerts.append("üö® CRITIQUE: Sharpe ratio n√©gatif")
            elif portfolio_metrics.get("avg_sharpe", 0) < 0.5:
                alerts.append("‚ö†Ô∏è WARNING: Sharpe ratio faible")

            if portfolio_metrics.get("total_trades", 0) == 0:
                alerts.append("üö® CRITIQUE: Aucun trade g√©n√©r√©")

        # Alertes risque
        if risk_metrics.get("risk_level") == "HIGH":
            alerts.append("üö® RISQUE √âLEV√â: R√©vision n√©cessaire")

        if risk_metrics.get("diversification_score", 0) < 0.5:
            alerts.append("‚ö†Ô∏è Diversification insuffisante")

        # Alertes ex√©cution
        if execution_health.get("pipeline_status") == "CRITICAL":
            alerts.append("üö® PIPELINE CRITIQUE: Intervention requise")
        elif execution_health.get("pipeline_status") == "DEGRADED":
            alerts.append("‚ö†Ô∏è Pipeline d√©grad√©")

        # Alertes temporelles
        last_exec = execution_health.get("last_execution")
        if last_exec:
            try:
                last_time = datetime.fromisoformat(last_exec.replace('Z', '+00:00'))
                if datetime.now() - last_time.replace(tzinfo=None) > timedelta(hours=24):
                    alerts.append("‚ö†Ô∏è Derni√®re ex√©cution > 24h")
            except:
                pass

        return alerts

    def display_dashboard(self):
        """Affiche le dashboard de monitoring"""
        print("\n" + "="*80)
        print("üìä PORTFOLIO MONITORING DASHBOARD")
        print("="*80)
        print(f"üïê Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # Chargement des donn√©es
        strategy_metrics = self.load_strategy_metrics()
        signals_data = self.load_signals_data()
        regime_data = self.load_regime_data()

        # Calculs
        portfolio_metrics = self.calculate_portfolio_metrics(strategy_metrics)
        risk_metrics = self.analyze_risk_metrics(portfolio_metrics, strategy_metrics)
        execution_health = self.check_execution_health()
        alerts = self.generate_alerts(portfolio_metrics, risk_metrics, execution_health)

        # Sauvegarde m√©triques
        self.metrics = {
            "portfolio": portfolio_metrics,
            "strategies": strategy_metrics,
            "risk": risk_metrics,
            "execution": execution_health,
            "alerts": alerts
        }

        # === PORTFOLIO OVERVIEW ===
        print(f"\nüéØ PORTFOLIO OVERVIEW")
        print("-" * 50)
        if portfolio_metrics:
            print(f"  Strat√©gies actives: {portfolio_metrics.get('total_strategies', 0)}")
            print(f"  Total trades: {portfolio_metrics.get('total_trades', 0)}")
            print(f"  PnL total: {portfolio_metrics.get('total_pnl', 0):.4f}")
            print(f"  Sharpe moyen: {portfolio_metrics.get('avg_sharpe', 0):.3f}")
            print(f"  Meilleur Sharpe: {portfolio_metrics.get('max_sharpe', 0):.3f}")
            print(f"  Drawdown moyen: {portfolio_metrics.get('avg_max_drawdown', 0):.1%}")
            print(f"  Pire drawdown: {portfolio_metrics.get('worst_drawdown', 0):.1%}")
        else:
            print("  ‚ùå Aucune m√©trique portfolio disponible")

        # === RISK ANALYSIS ===
        print(f"\nüõ°Ô∏è RISK ANALYSIS")
        print("-" * 50)
        print(f"  Niveau de risque: {risk_metrics.get('risk_level', 'UNKNOWN')}")
        print(f"  Score diversification: {risk_metrics.get('diversification_score', 0):.1%}")
        print(f"  Risque drawdown: {risk_metrics.get('drawdown_risk', 'UNKNOWN')}")
        print(f"  Stabilit√© performance: {risk_metrics.get('performance_stability', 0):.1%}")

        # === EXECUTION HEALTH ===
        print(f"\n‚ö° EXECUTION HEALTH")
        print("-" * 50)
        print(f"  Pipeline status: {execution_health.get('pipeline_status', 'UNKNOWN')}")
        print(f"  Taux de succ√®s: {execution_health.get('success_rate', 0):.1%}")
        print(f"  Temps ex√©cution: {execution_health.get('execution_time', 0):.1f}s")
        if execution_health.get("last_execution"):
            print(f"  Derni√®re ex√©cution: {execution_health['last_execution']}")

        # === STRATEGY BREAKDOWN ===
        print(f"\nüìà STRATEGIES BREAKDOWN")
        print("-" * 50)
        if strategy_metrics:
            for strategy_name, metrics in strategy_metrics.items():
                if isinstance(metrics, dict):
                    sharpe = metrics.get('sharpe_ratio', 0)
                    trades = metrics.get('total_trades', metrics.get('trades_count', 0))
                    win_rate = metrics.get('win_rate', 0)
                    print(f"  {strategy_name:15} | Sharpe: {sharpe:6.3f} | Trades: {trades:4d} | Win: {win_rate:5.1%}")
        else:
            print("  ‚ùå Aucune strat√©gie trouv√©e")

        # === ALERTS ===
        print(f"\nüö® ALERTS ({len(alerts)})")
        print("-" * 50)
        if alerts:
            for alert in alerts:
                print(f"  {alert}")
        else:
            print("  ‚úÖ Aucune alerte")

        # === DATA SUMMARY ===
        print(f"\nüìã DATA SUMMARY")
        print("-" * 50)
        print(f"  Signaux charg√©s: {len(signals_data)} datasets")
        print(f"  R√©gimes charg√©s: {len(regime_data)} datasets")

        print("\n" + "="*80)

    def save_monitoring_report(self) -> str:
        """Sauvegarde le rapport de monitoring"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.logs_dir / f"portfolio_monitoring_{timestamp}.json"

        report_data = {
            "timestamp": datetime.now().isoformat(),
            "monitoring_type": "portfolio",
            "metrics": self.metrics
        }

        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)

        logger.info(f"üìä Rapport monitoring sauv√©: {report_file}")
        return str(report_file)

def main():
    """Point d'entr√©e principal"""
    try:
        monitor = PortfolioMonitor()

        # Affichage dashboard
        monitor.display_dashboard()

        # Sauvegarde rapport
        report_file = monitor.save_monitoring_report()

        print(f"\n‚úÖ Monitoring termin√© - Rapport: {report_file}")
        return 0

    except Exception as e:
        logger.error(f"‚ùå Erreur monitoring: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())