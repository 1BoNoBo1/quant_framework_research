#!/usr/bin/env python3
"""
Test Complet de la Strat√©gie Adaptive Mean Reversion - Version Corrig√©e
=========================================================================

Tests mis √† jour pour toutes les nouvelles fonctionnalit√©s et corrections.
"""

import sys
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime

# Ajout du chemin pour les imports
sys.path.append('.')

def test_imports():
    """Test des imports principaux."""
    print("üîß Test des imports...")

    try:
        from qframe.strategies.research.adaptive_mean_reversion_strategy import AdaptiveMeanReversionStrategy
        from qframe.strategies.research.adaptive_mean_reversion_config import AdaptiveMeanReversionConfig
        from qframe.core.parallel_processor import create_safe_parallel_processor
        from qframe.data.validation_simple import create_simple_validator
        print("‚úÖ Tous les imports r√©ussis")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_configuration():
    """Test de la configuration sans warnings."""
    print("\nüîß Test de la configuration...")

    try:
        from qframe.strategies.research.adaptive_mean_reversion_config import AdaptiveMeanReversionConfig

        # Configuration par d√©faut
        config = AdaptiveMeanReversionConfig()
        print(f"‚úÖ Configuration par d√©faut: {config.name}")

        # Configuration personnalis√©e
        custom_config = AdaptiveMeanReversionConfig(
            name="test_strategy",
            universe=["BTC/USDT"],
            mean_reversion_windows=[10, 20, 50],
            volatility_windows=[10, 20],
            regime_confidence_threshold=0.6,
            min_data_points=30  # R√©duit pour les tests
        )
        print(f"‚úÖ Configuration personnalis√©e: {custom_config.name}")
        print(f"   - Min data points: {custom_config.min_data_points}")

        return custom_config

    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return None

def test_data_validation():
    """Test du validateur de donn√©es corrig√©."""
    print("\nüîß Test de la validation des donn√©es...")

    try:
        from qframe.data.validation_simple import create_simple_validator

        # Cr√©er des donn√©es de test
        np.random.seed(42)
        good_data = pd.DataFrame({
            'open': np.random.rand(50) * 10 + 100,
            'high': np.random.rand(50) * 10 + 105,
            'low': np.random.rand(50) * 10 + 95,
            'close': np.random.rand(50) * 10 + 100,
            'volume': np.random.randint(1000, 100000, 50)
        })

        # Assurer coh√©rence OHLCV
        good_data['high'] = np.maximum(good_data[['open', 'close']].max(axis=1), good_data['high'])
        good_data['low'] = np.minimum(good_data[['open', 'close']].min(axis=1), good_data['low'])

        # Test du validateur
        validator = create_simple_validator()
        result = validator.validate_ohlcv_data(good_data, "TEST")

        print(f"‚úÖ Validation r√©ussie: score {result.score:.3f}")
        print(f"   - Erreurs: {len(result.errors)}")
        print(f"   - M√©triques: {len(result.metrics)}")

        return good_data

    except Exception as e:
        print(f"‚ùå Erreur validation: {e}")
        return None

async def test_parallel_processor():
    """Test du processeur parall√®le corrig√©."""
    print("\nüîß Test du processeur parall√®le...")

    try:
        from qframe.core.parallel_processor import create_safe_parallel_processor

        # Donn√©es de test
        data = pd.DataFrame({
            'close': np.random.randn(50).cumsum() + 100,
            'volume': np.random.randint(1000, 10000, 50)
        })

        # Processeur s√ªr
        processor = create_safe_parallel_processor(max_workers=2)
        print(f"‚úÖ Processeur cr√©√©: threads={not processor.use_processes}")

        # Feature functions pour test
        def test_sma(df):
            df_copy = df.copy()
            df_copy['sma_10'] = df_copy['close'].rolling(10).mean()
            return df_copy[['sma_10']]

        def test_volatility(df):
            df_copy = df.copy()
            df_copy['vol'] = df_copy['close'].pct_change().rolling(10).std()
            return df_copy[['vol']]

        # Test features parall√®les
        features = await processor.process_parallel_features(data, [test_sma, test_volatility])
        print(f"‚úÖ Features parall√®les: {len(features.columns)} colonnes")

        # Test m√©triques de risque
        returns = pd.Series(np.random.randn(50) * 0.01)
        risk_metrics = await processor.parallel_risk_metrics(returns)
        valid_metrics = {k: v for k, v in risk_metrics.items()
                        if isinstance(v, (int, float)) and not np.isnan(v)}
        print(f"‚úÖ M√©triques de risque: {len(valid_metrics)} valides")

        processor.cleanup()
        return True

    except Exception as e:
        print(f"‚ùå Erreur processeur parall√®le: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_strategy_corrected():
    """Test de la strat√©gie avec toutes les corrections."""
    print("\nüîß Test de la strat√©gie corrig√©e...")

    try:
        from qframe.strategies.research.adaptive_mean_reversion_strategy import AdaptiveMeanReversionStrategy
        from qframe.strategies.research.adaptive_mean_reversion_config import AdaptiveMeanReversionConfig

        # Configuration adapt√©e pour les tests
        config = AdaptiveMeanReversionConfig(
            name="test_strategy",
            mean_reversion_windows=[10, 20],
            volatility_windows=[10, 20],
            min_data_points=30,  # R√©duit pour tests
            regime_confidence_threshold=0.6
        )

        # Donn√©es de test suffisamment grandes
        np.random.seed(42)
        dates = pd.date_range('2023-01-01', periods=60, freq='D')
        data = pd.DataFrame({
            'open': 100 + np.random.randn(60).cumsum() * 0.1,
            'high': 0,
            'low': 0,
            'close': 100 + np.random.randn(60).cumsum() * 0.1,
            'volume': np.random.randint(1000, 10000, 60)
        }, index=dates)

        data['high'] = data[['open', 'close']].max(axis=1) + 0.05
        data['low'] = data[['open', 'close']].min(axis=1) - 0.05

        print(f"‚úÖ Donn√©es de test: {len(data)} points")

        # Mock classes
        class MockDataProvider:
            def get_data(self, symbol, start_date, end_date):
                return data

        class MockRiskManager:
            def calculate_position_size(self, signal, price, volatility):
                return abs(signal) * 0.1

        # Cr√©er et tester la strat√©gie
        strategy = AdaptiveMeanReversionStrategy(
            data_provider=MockDataProvider(),
            risk_manager=MockRiskManager(),
            config=config
        )

        print(f"‚úÖ Strat√©gie initialis√©e: {strategy.name}")

        # Test du feature engineering corrig√©
        features = strategy._engineer_features(data)
        print(f"‚úÖ Features cr√©√©es: {len(features.columns) if features is not None else 0} colonnes")

        if features is not None:
            print(f"   - Lignes: {len(features)}")
            print(f"   - Premi√®res colonnes: {list(features.columns)[:5]}")

            # Test de g√©n√©ration de signaux
            signals = strategy.generate_signals(data)
            print(f"‚úÖ Signaux g√©n√©r√©s: {len(signals)} signaux")

            if signals:
                print(f"   - Premier signal: {signals[0].action}")
                print(f"   - Force: {signals[0].strength:.3f}")

        # Test des informations de strat√©gie
        info = strategy.get_strategy_info()
        print(f"‚úÖ Info strat√©gie: type={info.get('type')}, r√©gime={info.get('current_regime')}")

        # Cleanup
        strategy.cleanup()
        print(f"‚úÖ Cleanup r√©ussi")

        return True

    except Exception as e:
        print(f"‚ùå Erreur strat√©gie: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_integration_complete():
    """Test d'int√©gration compl√®te avec optimisation parall√®le."""
    print("\nüîß Test d'int√©gration compl√®te...")

    try:
        from qframe.strategies.research.adaptive_mean_reversion_strategy import AdaptiveMeanReversionStrategy
        from qframe.strategies.research.adaptive_mean_reversion_config import AdaptiveMeanReversionConfig

        # Configuration
        config = AdaptiveMeanReversionConfig(min_data_points=30)

        # Donn√©es
        np.random.seed(42)
        dates = pd.date_range('2023-01-01', periods=60, freq='D')
        data = pd.DataFrame({
            'open': 100 + np.random.randn(60).cumsum() * 0.1,
            'high': 0,
            'low': 0,
            'close': 100 + np.random.randn(60).cumsum() * 0.1,
            'volume': np.random.randint(1000, 10000, 60)
        }, index=dates)

        data['high'] = data[['open', 'close']].max(axis=1) + 0.05
        data['low'] = data[['open', 'close']].min(axis=1) - 0.05

        # Mock classes
        class MockDataProvider:
            def get_data(self, symbol, start_date, end_date):
                return data

        class MockRiskManager:
            def calculate_position_size(self, signal, price, volatility):
                return abs(signal) * 0.1

        # Strat√©gie avec processeur parall√®le
        strategy = AdaptiveMeanReversionStrategy(
            data_provider=MockDataProvider(),
            risk_manager=MockRiskManager(),
            config=config
        )

        print(f"‚úÖ Strat√©gie avec parall√©lisation cr√©√©e")

        # Test optimisation compl√®te
        returns = data['close'].pct_change().dropna()
        optimization_result = await strategy.optimize_strategy_with_parallel_processing(data, returns)

        print(f"‚úÖ Optimisation parall√®le: {optimization_result.get('parallel_processing')}")
        print(f"   - Features: {optimization_result.get('feature_count', 0)}")
        print(f"   - Donn√©es: {optimization_result.get('data_points', 0)}")

        # Test m√©triques de risque parall√®les
        risk_metrics = await strategy.calculate_parallel_risk_metrics(returns)
        valid_metrics = {k: v for k, v in risk_metrics.items()
                        if isinstance(v, (int, float)) and not np.isnan(v)}
        print(f"‚úÖ M√©triques de risque parall√®les: {len(valid_metrics)} valides")

        if valid_metrics:
            for key, value in list(valid_metrics.items())[:3]:
                print(f"   - {key}: {value:.4f}")

        strategy.cleanup()
        print(f"‚úÖ Test d'int√©gration r√©ussi")

        return True

    except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Fonction principale de test."""
    print("=" * 60)
    print("üß™ TESTS COMPLETS - STRAT√âGIE CORRIG√âE")
    print("=" * 60)

    tests_results = []

    # Test 1: Imports
    tests_results.append(test_imports())

    # Test 2: Configuration
    config = test_configuration()
    tests_results.append(config is not None)

    # Test 3: Validation des donn√©es
    data = test_data_validation()
    tests_results.append(data is not None)

    # Test 4: Processeur parall√®le
    parallel_result = await test_parallel_processor()
    tests_results.append(parallel_result)

    # Test 5: Strat√©gie corrig√©e
    strategy_result = test_strategy_corrected()
    tests_results.append(strategy_result)

    # Test 6: Int√©gration compl√®te
    integration_result = await test_integration_complete()
    tests_results.append(integration_result)

    # R√©sum√© final
    print("\n" + "=" * 60)
    total_tests = len(tests_results)
    passed_tests = sum(tests_results)

    print(f"üìä R√âSULTATS FINAUX")
    print(f"‚úÖ Tests r√©ussis: {passed_tests}/{total_tests}")
    print(f"üìà Taux de r√©ussite: {passed_tests/total_tests*100:.1f}%")

    if passed_tests == total_tests:
        print("üéâ TOUS LES PROBL√àMES SONT CORRIG√âS!")
        print("üöÄ Le projet QFrame est enti√®rement fonctionnel!")
    else:
        print(f"‚ö†Ô∏è  {total_tests - passed_tests} test(s) en √©chec")
        print("üîß Quelques ajustements peuvent √™tre n√©cessaires")

    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())