# üî¨ QFrame Research Platform Docker Compose

services:
  # üìì JupyterHub for multi-user research environment
  jupyterhub:
    image: jupyterhub/jupyterhub:4.0
    container_name: qframe-jupyterhub
    ports:
      - "8888:8000"
    environment:
      JUPYTERHUB_ADMIN: admin
      JUPYTERHUB_PASSWORD: ${JUPYTER_PASSWORD:-qframe123}
      JUPYTER_ENABLE_LAB: "yes"
      DOCKER_NOTEBOOK_IMAGE: qframe/research-notebook:latest
    volumes:
      - ./jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py
      - jupyterhub-data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - qframe-research

  # üêç Custom Research Notebook Image
  research-notebook:
    build:
      context: .
      dockerfile: Dockerfile.research
    image: qframe/research-notebook:latest
    container_name: qframe-notebook
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      MLFLOW_TRACKING_URI: http://mlflow:5000
      DASK_SCHEDULER: tcp://dask-scheduler:8786
    volumes:
      - ./qframe:/home/jovyan/qframe
      - ./data:/home/jovyan/data
      - ./notebooks:/home/jovyan/notebooks
    networks:
      - qframe-research

  # üî¨ MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.9.0
    container_name: qframe-mlflow
    ports:
      - "5000:5000"
    environment:
      BACKEND_STORE_URI: postgresql://mlflow:${MLFLOW_PASSWORD:-mlflow123}@postgres-mlflow:5432/mlflow
      ARTIFACT_ROOT: s3://qframe-mlflow/artifacts
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-minio123}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri $${BACKEND_STORE_URI}
      --default-artifact-root $${ARTIFACT_ROOT}
    depends_on:
      - postgres-mlflow
      - minio
    networks:
      - qframe-research

  # üóÑÔ∏è PostgreSQL for MLflow
  postgres-mlflow:
    image: postgres:15-alpine
    container_name: qframe-postgres-mlflow
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: ${MLFLOW_PASSWORD:-mlflow123}
      POSTGRES_DB: mlflow
    volumes:
      - postgres-mlflow-data:/var/lib/postgresql/data
    networks:
      - qframe-research

  # üì¶ MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: qframe-minio
    ports:
      - "9000:9000"
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - qframe-research

  # üöÄ Dask Scheduler for distributed computing
  dask-scheduler:
    image: ghcr.io/dask/dask:latest
    container_name: qframe-dask-scheduler
    ports:
      - "8786:8786"  # Scheduler
      - "8787:8787"  # Dashboard
    command: ["dask-scheduler"]
    networks:
      - qframe-research

  # üë∑ Dask Workers (scale as needed)
  dask-worker:
    image: ghcr.io/dask/dask:latest
    command: ["dask-worker", "tcp://dask-scheduler:8786"]
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
    depends_on:
      - dask-scheduler
    networks:
      - qframe-research

  # üêò TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: qframe-timescaledb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: qframe
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qframe123}
      POSTGRES_DB: qframe_research
    volumes:
      - timescale-data:/home/postgres/pgdata/data
      - ./init-timescale.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c shared_preload_libraries=timescaledb
    networks:
      - qframe-research

  # üîç Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: qframe-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - qframe-research

  # üìä Apache Superset for data visualization
  superset:
    image: apache/superset:latest
    container_name: qframe-superset
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-your-secret-key-change-in-production}
      DATABASE_DB: superset
      DATABASE_HOST: postgres-superset
      DATABASE_PASSWORD: ${SUPERSET_DB_PASSWORD:-superset123}
      DATABASE_USER: superset
      DATABASE_PORT: 5432
      DATABASE_DIALECT: postgresql
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: >
      bash -c "
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Admin --lastname User --email admin@qframe.com --password ${SUPERSET_PASSWORD:-admin} &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload
      "
    depends_on:
      - postgres-superset
      - redis
    volumes:
      - superset-data:/app/superset_home
    networks:
      - qframe-research

  # üóÑÔ∏è PostgreSQL for Superset
  postgres-superset:
    image: postgres:15-alpine
    container_name: qframe-postgres-superset
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: ${SUPERSET_DB_PASSWORD:-superset123}
      POSTGRES_DB: superset
    volumes:
      - postgres-superset-data:/var/lib/postgresql/data
    networks:
      - qframe-research

  # üöÄ Ray for distributed ML
  ray-head:
    image: rayproject/ray:latest
    container_name: qframe-ray-head
    ports:
      - "8265:8265"  # Dashboard
      - "10001:10001"  # Client port
    command: ray start --head --dashboard-host=0.0.0.0
    environment:
      RAY_ADDRESS: auto
    volumes:
      - ray-data:/tmp/ray
    networks:
      - qframe-research

  # üë∑ Ray Workers
  ray-worker:
    image: rayproject/ray:latest
    command: ray start --address=ray-head:10001 --block
    deploy:
      replicas: 2
    depends_on:
      - ray-head
    volumes:
      - ray-data:/tmp/ray
    networks:
      - qframe-research

  # üìä Optuna Dashboard for hyperparameter optimization
  optuna-dashboard:
    image: ghcr.io/optuna/optuna-dashboard:latest
    container_name: qframe-optuna
    ports:
      - "8080:8080"
    environment:
      OPTUNA_STORAGE: postgresql://optuna:${OPTUNA_PASSWORD:-optuna123}@postgres-optuna:5432/optuna
    depends_on:
      - postgres-optuna
    networks:
      - qframe-research

  # üóÑÔ∏è PostgreSQL for Optuna
  postgres-optuna:
    image: postgres:15-alpine
    container_name: qframe-postgres-optuna
    environment:
      POSTGRES_USER: optuna
      POSTGRES_PASSWORD: ${OPTUNA_PASSWORD:-optuna123}
      POSTGRES_DB: optuna
    volumes:
      - postgres-optuna-data:/var/lib/postgresql/data
    networks:
      - qframe-research

  # üì° Apache Kafka for streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: qframe-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - qframe-research

  # üéØ Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: qframe-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - qframe-research

  # üî¥ Redis (shared)
  redis:
    image: redis:7-alpine
    container_name: qframe-redis-research
    ports:
      - "6380:6379"
    volumes:
      - redis-research-data:/data
    networks:
      - qframe-research

volumes:
  jupyterhub-data:
  postgres-mlflow-data:
  postgres-superset-data:
  postgres-optuna-data:
  minio-data:
  timescale-data:
  elasticsearch-data:
  superset-data:
  ray-data:
  kafka-data:
  zookeeper-data:
  redis-research-data:

networks:
  qframe-research:
    driver: bridge