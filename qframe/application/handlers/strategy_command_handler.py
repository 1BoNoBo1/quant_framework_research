"""
Application Handler: StrategyCommandHandler
==========================================

Handler pour les commandes li√©es aux strat√©gies.
Orchestre les use cases de cr√©ation, modification et suppression des strat√©gies.
"""

from typing import Dict, Any, List
from datetime import datetime
import logging

from ...domain.entities.strategy import Strategy, StrategyStatus, StrategyType
from ...domain.repositories.strategy_repository import StrategyRepository, RepositoryError
from ...domain.services.signal_service import SignalService
from ..commands.strategy_commands import (
    CreateStrategyCommand,
    UpdateStrategyCommand,
    ActivateStrategyCommand,
    DeactivateStrategyCommand,
    DeleteStrategyCommand
)

logger = logging.getLogger(__name__)


class StrategyCommandHandler:
    """
    Handler pour les commandes de strat√©gie.

    Impl√©mente les use cases de la couche application
    en orchestrant les services du domaine.
    """

    def __init__(
        self,
        strategy_repository: StrategyRepository,
        signal_service: SignalService
    ):
        self.strategy_repository = strategy_repository
        self.signal_service = signal_service

    async def handle_create_strategy(self, command: CreateStrategyCommand) -> str:
        """
        Traite la commande de cr√©ation d'une strat√©gie.

        Args:
            command: Commande de cr√©ation

        Returns:
            ID de la strat√©gie cr√©√©e

        Raises:
            ValueError: Si les donn√©es sont invalides
            RepositoryError: Si erreur de persistance
        """
        logger.info(f"üìù Cr√©ation d'une nouvelle strat√©gie: {command.name}")

        # V√©rifier que le nom n'existe pas d√©j√†
        existing = await self.strategy_repository.find_by_name(command.name)
        if existing:
            raise ValueError(f"Strategy with name '{command.name}' already exists")

        # Cr√©er l'entit√© strat√©gie
        strategy = Strategy(
            name=command.name,
            description=command.description,
            strategy_type=command.strategy_type,
            universe=set(command.universe),
            max_position_size=command.max_position_size,
            max_positions=command.max_positions,
            risk_per_trade=command.risk_per_trade
        )

        # Valider la strat√©gie (les invariants sont v√©rifi√©s dans __post_init__)
        # Ici on peut ajouter des validations m√©tier suppl√©mentaires
        await self._validate_strategy_business_rules(strategy)

        # Sauvegarder
        await self.strategy_repository.save(strategy)

        logger.info(f"‚úÖ Strat√©gie cr√©√©e avec succ√®s: {strategy.id}")
        return strategy.id

    async def handle_update_strategy(self, command: UpdateStrategyCommand) -> None:
        """
        Traite la commande de mise √† jour d'une strat√©gie.

        Args:
            command: Commande de mise √† jour

        Raises:
            ValueError: Si la strat√©gie n'existe pas ou donn√©es invalides
            RepositoryError: Si erreur de persistance
        """
        logger.info(f"üîÑ Mise √† jour de la strat√©gie: {command.strategy_id}")

        # R√©cup√©rer la strat√©gie existante
        strategy = await self.strategy_repository.find_by_id(command.strategy_id)
        if not strategy:
            raise ValueError(f"Strategy {command.strategy_id} not found")

        # V√©rifier que la strat√©gie peut √™tre modifi√©e
        if strategy.status == StrategyStatus.ACTIVE:
            logger.warning("‚ö†Ô∏è Modification d'une strat√©gie active")

        # Cr√©er une nouvelle version avec les modifications
        updated_strategy = Strategy(
            id=strategy.id,
            name=command.name or strategy.name,
            description=command.description or strategy.description,
            strategy_type=strategy.strategy_type,  # Type ne peut pas changer
            version=strategy.version,
            author=strategy.author,
            created_at=strategy.created_at,
            updated_at=datetime.utcnow(),
            status=strategy.status,
            universe=set(command.universe) if command.universe else strategy.universe,
            max_position_size=command.max_position_size or strategy.max_position_size,
            max_positions=command.max_positions or strategy.max_positions,
            risk_per_trade=command.risk_per_trade or strategy.risk_per_trade,
            total_trades=strategy.total_trades,
            winning_trades=strategy.winning_trades,
            total_pnl=strategy.total_pnl,
            max_drawdown=strategy.max_drawdown,
            sharpe_ratio=strategy.sharpe_ratio,
            positions=strategy.positions,
            signal_history=strategy.signal_history
        )

        # Valider les nouvelles donn√©es
        await self._validate_strategy_business_rules(updated_strategy)

        # Sauvegarder
        await self.strategy_repository.update(updated_strategy)

        logger.info(f"‚úÖ Strat√©gie mise √† jour: {command.strategy_id}")

    async def handle_activate_strategy(self, command: ActivateStrategyCommand) -> None:
        """
        Traite la commande d'activation d'une strat√©gie.

        Args:
            command: Commande d'activation

        Raises:
            ValueError: Si la strat√©gie ne peut pas √™tre activ√©e
        """
        logger.info(f"‚ñ∂Ô∏è Activation de la strat√©gie: {command.strategy_id}")

        strategy = await self.strategy_repository.find_by_id(command.strategy_id)
        if not strategy:
            raise ValueError(f"Strategy {command.strategy_id} not found")

        # V√©rifications pr√©alables √† l'activation
        await self._validate_strategy_activation(strategy)

        # Activer la strat√©gie
        strategy.activate()

        # Sauvegarder
        await self.strategy_repository.update(strategy)

        logger.info(f"‚úÖ Strat√©gie activ√©e: {command.strategy_id}")

    async def handle_deactivate_strategy(self, command: DeactivateStrategyCommand) -> None:
        """
        Traite la commande de d√©sactivation d'une strat√©gie.

        Args:
            command: Commande de d√©sactivation
        """
        logger.info(f"‚è∏Ô∏è D√©sactivation de la strat√©gie: {command.strategy_id}")

        strategy = await self.strategy_repository.find_by_id(command.strategy_id)
        if not strategy:
            raise ValueError(f"Strategy {command.strategy_id} not found")

        # G√©rer les positions ouvertes selon la strat√©gie de fermeture
        if command.close_positions and strategy.positions:
            await self._close_strategy_positions(strategy, command.force_close)

        # D√©sactiver selon le mode
        if command.pause_only:
            strategy.pause()
        else:
            strategy.stop()

        # Sauvegarder
        await self.strategy_repository.update(strategy)

        logger.info(f"‚úÖ Strat√©gie {'mise en pause' if command.pause_only else 'arr√™t√©e'}: {command.strategy_id}")

    async def handle_delete_strategy(self, command: DeleteStrategyCommand) -> None:
        """
        Traite la commande de suppression d'une strat√©gie.

        Args:
            command: Commande de suppression

        Raises:
            ValueError: Si la strat√©gie ne peut pas √™tre supprim√©e
        """
        logger.info(f"üóëÔ∏è Suppression de la strat√©gie: {command.strategy_id}")

        strategy = await self.strategy_repository.find_by_id(command.strategy_id)
        if not strategy:
            raise ValueError(f"Strategy {command.strategy_id} not found")

        # V√©rifications de s√©curit√©
        if strategy.status == StrategyStatus.ACTIVE and not command.force:
            raise ValueError("Cannot delete active strategy without force flag")

        if strategy.positions and not command.force:
            raise ValueError("Cannot delete strategy with open positions without force flag")

        # Sauvegarde optionnelle avant suppression
        if command.backup_before_delete:
            backup_id = await self.strategy_repository.backup_strategy(command.strategy_id)
            logger.info(f"üíæ Sauvegarde cr√©√©e: {backup_id}")

        # Fermer toutes les positions si n√©cessaire
        if strategy.positions:
            await self._close_strategy_positions(strategy, force=True)

        # Supprimer
        deleted = await self.strategy_repository.delete(command.strategy_id)
        if not deleted:
            raise ValueError(f"Failed to delete strategy {command.strategy_id}")

        logger.info(f"‚úÖ Strat√©gie supprim√©e: {command.strategy_id}")

    async def _validate_strategy_business_rules(self, strategy: Strategy) -> None:
        """Valide les r√®gles m√©tier pour une strat√©gie."""

        # V√©rification de l'univers de trading
        if not strategy.universe:
            raise ValueError("Strategy must have at least one symbol in universe")

        # V√©rification des param√®tres de risque
        if strategy.max_position_size * strategy.max_positions > 1.0:
            raise ValueError("Total possible exposure exceeds 100%")

        # V√©rifications sp√©cifiques par type de strat√©gie
        if strategy.strategy_type == StrategyType.ARBITRAGE:
            if len(strategy.universe) < 2:
                raise ValueError("Arbitrage strategy requires at least 2 symbols")

        # Autres validations m√©tier...

    async def _validate_strategy_activation(self, strategy: Strategy) -> None:
        """Valide qu'une strat√©gie peut √™tre activ√©e."""

        # V√©rifier l'√©tat
        if strategy.status == StrategyStatus.ERROR:
            raise ValueError("Cannot activate strategy in error state")

        # V√©rifier la configuration
        if not strategy.universe:
            raise ValueError("Cannot activate strategy without trading universe")

        # V√©rifier les performances historiques (optionnel)
        if strategy.total_trades > 10 and strategy.sharpe_ratio and strategy.sharpe_ratio < -1:
            logger.warning("‚ö†Ô∏è Activating strategy with poor historical performance")

        # Autres v√©rifications...

    async def _close_strategy_positions(self, strategy: Strategy, force: bool = False) -> None:
        """Ferme toutes les positions d'une strat√©gie."""
        logger.info(f"üîí Fermeture de {len(strategy.positions)} positions")

        for symbol, position in strategy.positions.items():
            try:
                # Ici on utiliserait un service d'ex√©cution pour fermer la position
                # Pour l'instant, on simule la fermeture
                closed_position = position.close_position(position.current_price)
                logger.info(f"‚úÖ Position ferm√©e: {symbol}, PnL: {closed_position.realized_pnl}")

                # Mettre √† jour les m√©triques de la strat√©gie
                strategy._update_trade_metrics(closed_position)

            except Exception as e:
                if not force:
                    raise ValueError(f"Failed to close position {symbol}: {e}")
                else:
                    logger.error(f"‚ùå Erreur fermeture forc√©e {symbol}: {e}")

        # Vider les positions
        strategy.positions.clear()

    async def get_strategy_statistics(self) -> Dict[str, Any]:
        """Retourne les statistiques globales des strat√©gies."""
        return await self.strategy_repository.get_statistics()

    async def bulk_activate_strategies(self, strategy_ids: List[str]) -> Dict[str, Any]:
        """Active plusieurs strat√©gies en lot."""
        results = {"success": [], "errors": []}

        for strategy_id in strategy_ids:
            try:
                command = ActivateStrategyCommand(strategy_id=strategy_id)
                await self.handle_activate_strategy(command)
                results["success"].append(strategy_id)
            except Exception as e:
                results["errors"].append({"strategy_id": strategy_id, "error": str(e)})

        return results

    async def bulk_deactivate_strategies(
        self,
        strategy_ids: List[str],
        pause_only: bool = True
    ) -> Dict[str, Any]:
        """D√©sactive plusieurs strat√©gies en lot."""
        results = {"success": [], "errors": []}

        for strategy_id in strategy_ids:
            try:
                command = DeactivateStrategyCommand(
                    strategy_id=strategy_id,
                    pause_only=pause_only
                )
                await self.handle_deactivate_strategy(command)
                results["success"].append(strategy_id)
            except Exception as e:
                results["errors"].append({"strategy_id": strategy_id, "error": str(e)})

        return results