# Docker Compose pour QFrame avec GUI
version: '3.8'

services:
  # QFrame API Backend
  qframe-api:
    build:
      context: ../
      dockerfile: infrastructure/api/Dockerfile
    container_name: qframe-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-qframe-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/data/qframe.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - qframe_data:/app/data
      - qframe_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - qframe_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # QFrame Streamlit GUI
  qframe-gui:
    build:
      context: ../
      dockerfile: ui/streamlit_app/Dockerfile
    container_name: qframe-gui
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - QFRAME_API_URL=http://qframe-api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      - qframe-api
    networks:
      - qframe_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: qframe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qframe_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL pour données persistantes
  postgres:
    image: postgres:15-alpine
    container_name: qframe-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-qframe}
      - POSTGRES_USER=${POSTGRES_USER:-qframe}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-qframe123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - qframe_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-qframe} -d ${POSTGRES_DB:-qframe}"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx proxy pour routing et SSL
  nginx:
    image: nginx:alpine
    container_name: qframe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - qframe-api
      - qframe-gui
    networks:
      - qframe_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: qframe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - qframe_network
    profiles:
      - monitoring

  # Grafana pour visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: qframe-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - qframe_network
    profiles:
      - monitoring

# Volumes persistants
volumes:
  qframe_data:
    driver: local
  qframe_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

# Réseau interne
networks:
  qframe_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16