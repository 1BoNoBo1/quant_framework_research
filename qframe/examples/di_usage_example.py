"""
Example: Utilisation du Dependency Injection Container
====================================================

Exemple d'utilisation du container DI refactoris√© avec l'architecture hexagonale.
Montre comment r√©soudre et utiliser les services configur√©s.
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports du framework
from ..core.container import get_container
from ..domain.entities.strategy import StrategyType
from ..application.commands.strategy_commands import create_strategy_command
from ..application.handlers.strategy_command_handler import StrategyCommandHandler
from ..application.queries.signal_queries import active_signals_query
from ..application.handlers.signal_query_handler import SignalQueryHandler


async def example_di_usage():
    """
    Exemple complet d'utilisation du DI container.
    """
    print("üöÄ Exemple d'utilisation du DI Container")
    print("=" * 50)

    # 1. R√©cup√©rer le container configur√©
    container = get_container()
    print(f"‚úÖ Container initialis√© avec {len(container.get_registrations())} services")

    # 2. R√©soudre les handlers d'application
    print("\nüì¶ R√©solution des handlers...")

    # Utiliser un scope pour les handlers scoped
    with container.create_scope() as scope:

        # R√©soudre le handler de commandes de strat√©gie
        strategy_handler = scope.resolve(StrategyCommandHandler)
        print(f"‚úÖ StrategyCommandHandler r√©solu: {type(strategy_handler).__name__}")

        # R√©soudre le handler de queries de signaux
        signal_handler = scope.resolve(SignalQueryHandler)
        print(f"‚úÖ SignalQueryHandler r√©solu: {type(signal_handler).__name__}")

        # 3. Cr√©er une nouvelle strat√©gie
        print("\nüéØ Test de cr√©ation de strat√©gie...")

        create_command = create_strategy_command(
            name="Test Strategy DI",
            strategy_type=StrategyType.MEAN_REVERSION,
            universe=["BTC/USDT", "ETH/USDT"],
            description="Strat√©gie de test pour d√©montrer le DI",
            max_position_size=0.05,
            max_positions=3
        )

        try:
            strategy_id = await strategy_handler.handle_create_strategy(create_command)
            print(f"‚úÖ Strat√©gie cr√©√©e avec succ√®s: {strategy_id}")

            # 4. R√©cup√©rer les signaux actifs
            print("\nüìä Test de query de signaux...")

            active_query = active_signals_query(
                max_age_minutes=120,
                limit=10
            )

            active_signals = await signal_handler.handle_get_active_signals(active_query)
            print(f"‚úÖ Signaux actifs trouv√©s: {len(active_signals)}")

            # 5. R√©cup√©rer les statistiques des strat√©gies
            print("\nüìà Test des statistiques...")

            stats = await strategy_handler.get_strategy_statistics()
            print(f"‚úÖ Statistiques: {stats.get('total_strategies', 0)} strat√©gies")

        except Exception as e:
            print(f"‚ùå Erreur lors des tests: {e}")

    print("\nüéâ Exemple termin√© avec succ√®s!")


async def example_service_resolution():
    """
    Exemple de r√©solution directe des services.
    """
    print("\nüîß Exemple de r√©solution directe des services")
    print("=" * 50)

    container = get_container()

    # R√©soudre les services individuels
    from ..domain.services.signal_service import SignalService
    from ..domain.repositories.strategy_repository import StrategyRepository
    from ..infrastructure.external.market_data_service import MarketDataService
    from ..infrastructure.external.broker_service import BrokerService

    print("\nüì¶ R√©solution des services...")

    # Services domain
    signal_service = container.resolve(SignalService)
    print(f"‚úÖ SignalService: {type(signal_service).__name__}")

    # Repository
    strategy_repo = container.resolve(StrategyRepository)
    print(f"‚úÖ StrategyRepository: {type(strategy_repo).__name__}")

    # Services infrastructure
    market_data = container.resolve(MarketDataService)
    print(f"‚úÖ MarketDataService: {type(market_data).__name__}")

    broker = container.resolve(BrokerService)
    print(f"‚úÖ BrokerService: {type(broker).__name__}")

    # Test des services
    print("\nüß™ Test des services...")

    # Test repository
    strategies = await strategy_repo.find_all()
    print(f"‚úÖ Strat√©gies dans le repo: {len(strategies)}")

    # Test market data
    price = await market_data.get_current_price("BTC/USDT")
    print(f"‚úÖ Prix BTC/USDT: ${price}")

    # Test broker
    balance = await broker.get_account_balance()
    print(f"‚úÖ Solde USDT: ${balance.get('USDT', {}).get('total', 0)}")


def example_container_statistics():
    """
    Exemple d'affichage des statistiques du container.
    """
    print("\nüìä Statistiques du Container DI")
    print("=" * 50)

    from ..infrastructure.config.service_configuration import get_service_statistics

    container = get_container()
    stats = get_service_statistics(container)

    print(f"üì¶ Total des services: {stats['total_services']}")
    print(f"üîí Singletons: {stats['singletons']}")
    print(f"‚ö° Transients: {stats['transients']}")
    print(f"üéØ Scoped: {stats['scoped']}")
    print(f"üè≠ Avec factories: {stats['with_factories']}")

    print("\nüìã Liste des services:")
    for service in stats['services']:
        lifetime_icon = {
            'singleton': 'üîí',
            'transient': '‚ö°',
            'scoped': 'üéØ'
        }.get(service['lifetime'], '‚ùì')

        print(f"  {lifetime_icon} {service['interface']} -> {service['implementation']}")


async def example_error_handling():
    """
    Exemple de gestion d'erreurs avec le DI.
    """
    print("\n‚ö†Ô∏è Exemple de gestion d'erreurs")
    print("=" * 50)

    container = get_container()

    try:
        # Essayer de r√©soudre un service non enregistr√©
        from typing import Protocol

        class NonExistentService(Protocol):
            def do_something(self) -> str: ...

        service = container.resolve(NonExistentService)

    except ValueError as e:
        print(f"‚úÖ Erreur attendue pour service non enregistr√©: {e}")

    # Test de d√©pendance circulaire (√† impl√©menter si n√©cessaire)
    print("‚úÖ Gestion d'erreurs test√©e")


async def main():
    """Fonction principale de l'exemple."""
    print("üöÄ D√âMONSTRATION DU DEPENDENCY INJECTION CONTAINER")
    print("=" * 60)

    try:
        # Exemple 1: Utilisation compl√®te du DI
        await example_di_usage()

        # Exemple 2: R√©solution directe des services
        await example_service_resolution()

        # Exemple 3: Statistiques du container
        example_container_statistics()

        # Exemple 4: Gestion d'erreurs
        await example_error_handling()

        print("\nüéâ TOUS LES EXEMPLES TERMIN√âS AVEC SUCC√àS!")

    except Exception as e:
        print(f"\n‚ùå ERREUR DANS L'EXEMPLE: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())