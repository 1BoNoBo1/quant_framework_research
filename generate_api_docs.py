#!/usr/bin/env python3
"""
üìö G√©n√©rateur de Documentation API
G√©n√®re la documentation OpenAPI compl√®te et des exemples d'utilisation
"""

import json
import sys
import subprocess
import time
import requests
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_openapi_schema():
    """G√©n√®re le sch√©ma OpenAPI en d√©marrant l'API temporairement."""

    # D√©marrer l'API en arri√®re-plan
    logger.info("üöÄ D√©marrage temporaire de l'API pour g√©n√©ration du sch√©ma...")
    api_process = subprocess.Popen([
        "poetry", "run", "python", "start_api.py", "--port", "8004"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    try:
        # Attendre le d√©marrage
        time.sleep(8)

        # R√©cup√©rer le sch√©ma OpenAPI
        response = requests.get("http://localhost:8004/openapi.json", timeout=10)

        if response.status_code == 200:
            schema = response.json()

            # Sauvegarder le sch√©ma OpenAPI
            schema_file = Path("docs/api_schema.json")
            schema_file.parent.mkdir(exist_ok=True)

            with open(schema_file, "w") as f:
                json.dump(schema, f, indent=2)

            logger.info(f"‚úÖ Sch√©ma OpenAPI sauvegard√©: {schema_file}")

            # G√©n√©rer la documentation Markdown
            generate_markdown_docs(schema)

            return schema

        else:
            logger.error(f"‚ùå Erreur r√©cup√©ration sch√©ma: HTTP {response.status_code}")
            return None

    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration sch√©ma: {e}")
        return None

    finally:
        # Arr√™ter l'API
        logger.info("üõë Arr√™t de l'API temporaire...")
        api_process.terminate()
        api_process.wait(timeout=5)

def generate_markdown_docs(schema):
    """G√©n√®re une documentation Markdown √† partir du sch√©ma OpenAPI."""

    markdown_content = f"""# üìö Documentation API QFrame

## Informations G√©n√©rales

- **Titre**: {schema.get('info', {}).get('title', 'QFrame API')}
- **Version**: {schema.get('info', {}).get('version', '1.0.0')}
- **Description**: {schema.get('info', {}).get('description', 'Backend API pour QFrame')}
- **URL de base**: `http://localhost:8000`

## Authentification

L'API utilise un middleware d'authentification basique. Pour les tests de d√©veloppement, aucune authentification n'est requise sur les endpoints publics.

## Endpoints Disponibles

"""

    # Grouper les endpoints par tags
    paths = schema.get('paths', {})
    endpoints_by_tag = {}

    for path, methods in paths.items():
        for method, details in methods.items():
            if method.lower() in ['get', 'post', 'put', 'delete', 'patch']:
                tags = details.get('tags', ['Autres'])
                tag = tags[0] if tags else 'Autres'

                if tag not in endpoints_by_tag:
                    endpoints_by_tag[tag] = []

                endpoints_by_tag[tag].append({
                    'path': path,
                    'method': method.upper(),
                    'summary': details.get('summary', ''),
                    'description': details.get('description', ''),
                    'parameters': details.get('parameters', []),
                    'responses': details.get('responses', {})
                })

    # G√©n√©rer la documentation par section
    for tag, endpoints in endpoints_by_tag.items():
        markdown_content += f"### {tag}\n\n"

        for endpoint in endpoints:
            markdown_content += f"#### {endpoint['method']} `{endpoint['path']}`\n\n"

            if endpoint['summary']:
                markdown_content += f"**R√©sum√©**: {endpoint['summary']}\n\n"

            if endpoint['description']:
                markdown_content += f"**Description**: {endpoint['description']}\n\n"

            # Param√®tres
            if endpoint['parameters']:
                markdown_content += "**Param√®tres**:\n"
                for param in endpoint['parameters']:
                    param_name = param.get('name', '')
                    param_type = param.get('schema', {}).get('type', 'string')
                    param_desc = param.get('description', '')
                    param_required = param.get('required', False)
                    required_text = " (requis)" if param_required else " (optionnel)"

                    markdown_content += f"- `{param_name}` ({param_type}){required_text}: {param_desc}\n"
                markdown_content += "\n"

            # R√©ponses
            if endpoint['responses']:
                markdown_content += "**R√©ponses**:\n"
                for code, response in endpoint['responses'].items():
                    desc = response.get('description', '')
                    markdown_content += f"- `{code}`: {desc}\n"
                markdown_content += "\n"

            # Exemple cURL
            curl_example = generate_curl_example(endpoint)
            markdown_content += f"**Exemple cURL**:\n```bash\n{curl_example}\n```\n\n"

            markdown_content += "---\n\n"

    # Mod√®les de donn√©es
    if 'components' in schema and 'schemas' in schema['components']:
        markdown_content += "## Mod√®les de Donn√©es\n\n"

        for model_name, model_schema in schema['components']['schemas'].items():
            markdown_content += f"### {model_name}\n\n"

            if 'description' in model_schema:
                markdown_content += f"{model_schema['description']}\n\n"

            if 'properties' in model_schema:
                markdown_content += "**Propri√©t√©s**:\n"
                for prop_name, prop_details in model_schema['properties'].items():
                    prop_type = prop_details.get('type', 'unknown')
                    prop_desc = prop_details.get('description', '')
                    markdown_content += f"- `{prop_name}` ({prop_type}): {prop_desc}\n"
                markdown_content += "\n"

    # Sauvegarder la documentation
    docs_file = Path("docs/API_DOCUMENTATION.md")
    with open(docs_file, "w") as f:
        f.write(markdown_content)

    logger.info(f"‚úÖ Documentation Markdown g√©n√©r√©e: {docs_file}")

def generate_curl_example(endpoint):
    """G√©n√®re un exemple cURL pour un endpoint."""
    method = endpoint['method']
    path = endpoint['path']

    if method == 'GET':
        return f"curl -X GET http://localhost:8000{path}"
    elif method == 'POST':
        return f'curl -X POST http://localhost:8000{path} \\\\\\n  -H "Content-Type: application/json" \\\\\\n  -d \'{{"example": "data"}}\''
    elif method == 'PUT':
        return f'curl -X PUT http://localhost:8000{path} \\\\\\n  -H "Content-Type: application/json" \\\\\\n  -d \'{{"example": "data"}}\''
    elif method == 'DELETE':
        return f"curl -X DELETE http://localhost:8000{path}"
    else:
        return f"curl -X {method} http://localhost:8000{path}"

def generate_usage_examples():
    """G√©n√®re des exemples d'utilisation en Python."""

    examples_content = '''# üêç Exemples d'Utilisation API QFrame

## Client Python Simple

```python
import requests
import json

class QFrameAPIClient:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})

    def get_health(self):
        """V√©rifie l'√©tat de sant√© de l'API."""
        response = self.session.get(f"{self.base_url}/health")
        return response.json()

    def get_strategies(self):
        """R√©cup√®re la liste des strat√©gies."""
        response = self.session.get(f"{self.base_url}/api/v1/strategies")
        return response.json()

    def create_order(self, symbol, side, order_type, quantity):
        """Cr√©e un nouvel ordre."""
        order_data = {
            "symbol": symbol,
            "side": side,
            "type": order_type,
            "quantity": quantity
        }
        response = self.session.post(
            f"{self.base_url}/api/v1/orders",
            json=order_data
        )
        return response.json()

# Utilisation
client = QFrameAPIClient()

# V√©rifier la sant√©
health = client.get_health()
print("Sant√© API:", health)

# R√©cup√©rer les strat√©gies
strategies = client.get_strategies()
print("Strat√©gies:", strategies)

# Cr√©er un ordre
order = client.create_order("BTC/USD", "BUY", "MARKET", 0.001)
print("Ordre cr√©√©:", order)
```

## Exemples JavaScript/Node.js

```javascript
const axios = require('axios');

class QFrameAPIClient {
    constructor(baseURL = 'http://localhost:8000') {
        this.client = axios.create({
            baseURL,
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }

    async getHealth() {
        const response = await this.client.get('/health');
        return response.data;
    }

    async getStrategies() {
        const response = await this.client.get('/api/v1/strategies');
        return response.data;
    }

    async createOrder(symbol, side, type, quantity) {
        const orderData = { symbol, side, type, quantity };
        const response = await this.client.post('/api/v1/orders', orderData);
        return response.data;
    }
}

// Utilisation
(async () => {
    const client = new QFrameAPIClient();

    try {
        const health = await client.getHealth();
        console.log('Sant√© API:', health);

        const strategies = await client.getStrategies();
        console.log('Strat√©gies:', strategies);

    } catch (error) {
        console.error('Erreur API:', error.response?.data || error.message);
    }
})();
```

## Tests avec cURL

```bash
# Test de sant√©
curl -X GET http://localhost:8000/health

# R√©cup√©rer les strat√©gies
curl -X GET http://localhost:8000/api/v1/strategies

# Cr√©er un ordre
curl -X POST http://localhost:8000/api/v1/orders \\
  -H "Content-Type: application/json" \\
  -d '{
    "symbol": "BTC/USD",
    "side": "BUY",
    "type": "MARKET",
    "quantity": 0.001
  }'

# R√©cup√©rer les positions
curl -X GET http://localhost:8000/api/v1/positions

# Calculer VaR
curl -X GET "http://localhost:8000/api/v1/risk/var?confidence_level=0.95&method=monte_carlo"
```

## WebSocket Temps R√©el

```python
import asyncio
import websockets
import json

async def websocket_client():
    uri = "ws://localhost:8000/ws"

    async with websockets.connect(uri) as websocket:
        # S'abonner aux √©v√©nements de prix
        subscribe_message = {
            "type": "subscribe",
            "event_types": ["PRICE_UPDATE", "ORDER_FILLED"],
            "symbols": ["BTC/USD", "ETH/USD"]
        }

        await websocket.send(json.dumps(subscribe_message))

        # √âcouter les messages
        async for message in websocket:
            data = json.loads(message)
            print(f"Re√ßu: {data}")

# Ex√©cuter le client WebSocket
asyncio.run(websocket_client())
```
'''

    examples_file = Path("docs/API_EXAMPLES.md")
    with open(examples_file, "w") as f:
        f.write(examples_content)

    logger.info(f"‚úÖ Exemples d'utilisation g√©n√©r√©s: {examples_file}")

def main():
    """Point d'entr√©e principal."""
    logger.info("üìö G√©n√©ration de la documentation API QFrame...")

    # Cr√©er le dossier docs
    Path("docs").mkdir(exist_ok=True)

    # G√©n√©rer le sch√©ma OpenAPI et la documentation
    schema = generate_openapi_schema()

    if schema:
        logger.info("‚úÖ Documentation OpenAPI g√©n√©r√©e avec succ√®s")

        # G√©n√©rer les exemples d'utilisation
        generate_usage_examples()

        logger.info("üéâ Documentation compl√®te g√©n√©r√©e !")
        logger.info("üìÅ Fichiers cr√©√©s:")
        logger.info("  - docs/api_schema.json (Sch√©ma OpenAPI)")
        logger.info("  - docs/API_DOCUMENTATION.md (Documentation compl√®te)")
        logger.info("  - docs/API_EXAMPLES.md (Exemples d'utilisation)")

    else:
        logger.error("‚ùå √âchec de la g√©n√©ration de documentation")
        sys.exit(1)

if __name__ == "__main__":
    main()