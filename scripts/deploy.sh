#!/bin/bash
# üöÄ QFrame Deployment Script
# Script complet pour d√©ployer QFrame en production

set -euo pipefail

# üîß Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENVIRONMENT="${1:-staging}"
VERSION="${2:-latest}"

# üé® Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# üìù Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# üîç V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."

    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi

    # V√©rifier kubectl
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl n'est pas install√©"
        exit 1
    fi

    # V√©rifier kustomize
    if ! command -v kustomize &> /dev/null; then
        log_error "kustomize n'est pas install√©"
        exit 1
    fi

    # V√©rifier la connexion Kubernetes
    if ! kubectl cluster-info &> /dev/null; then
        log_error "Impossible de se connecter au cluster Kubernetes"
        exit 1
    fi

    log_success "Tous les pr√©requis sont satisfaits"
}

# üê≥ Construction des images Docker
build_images() {
    log_info "Construction des images Docker..."

    cd "$PROJECT_ROOT"

    # Construction de l'image API
    log_info "Construction de l'image QFrame API..."
    docker build -t "qframe/api:$VERSION" -f Dockerfile .

    # Construction de l'image UI
    log_info "Construction de l'image QFrame UI..."
    docker build -t "qframe/ui:$VERSION" -f Dockerfile.ui .

    log_success "Images Docker construites avec succ√®s"
}

# üì¶ Push des images vers le registry
push_images() {
    log_info "Push des images vers le registry..."

    # Tag et push API
    docker tag "qframe/api:$VERSION" "ghcr.io/your-org/qframe-api:$VERSION"
    docker push "ghcr.io/your-org/qframe-api:$VERSION"

    # Tag et push UI
    docker tag "qframe/ui:$VERSION" "ghcr.io/your-org/qframe-ui:$VERSION"
    docker push "ghcr.io/your-org/qframe-ui:$VERSION"

    log_success "Images pouss√©es vers le registry"
}

# üèóÔ∏è D√©ploiement Kubernetes
deploy_kubernetes() {
    log_info "D√©ploiement sur Kubernetes ($ENVIRONMENT)..."

    cd "$PROJECT_ROOT/k8s"

    # D√©terminer le namespace
    if [ "$ENVIRONMENT" = "production" ]; then
        NAMESPACE="qframe"
    else
        NAMESPACE="qframe-$ENVIRONMENT"
    fi

    # Cr√©er le namespace s'il n'existe pas
    kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

    # Mettre √† jour les images dans kustomization
    kustomize edit set image "qframe/api=ghcr.io/your-org/qframe-api:$VERSION"
    kustomize edit set image "qframe/ui=ghcr.io/your-org/qframe-ui:$VERSION"

    # Appliquer la configuration
    kubectl apply -k . -n "$NAMESPACE"

    log_success "Configuration Kubernetes appliqu√©e"
}

# ‚è≥ Attendre que les d√©ploiements soient pr√™ts
wait_for_deployment() {
    log_info "Attente de la disponibilit√© des d√©ploiements..."

    local namespace
    if [ "$ENVIRONMENT" = "production" ]; then
        namespace="qframe"
    else
        namespace="qframe-$ENVIRONMENT"
    fi

    # Attendre l'API
    log_info "Attente du d√©ploiement qframe-api..."
    kubectl rollout status deployment/qframe-api -n "$namespace" --timeout=600s

    # Attendre l'UI
    log_info "Attente du d√©ploiement qframe-ui..."
    kubectl rollout status deployment/qframe-ui -n "$namespace" --timeout=600s

    # Attendre que les pods soient pr√™ts
    kubectl wait --for=condition=ready pod -l app=qframe-api -n "$namespace" --timeout=300s
    kubectl wait --for=condition=ready pod -l app=qframe-ui -n "$namespace" --timeout=300s

    log_success "Tous les d√©ploiements sont pr√™ts"
}

# üß™ Tests de sant√© post-d√©ploiement
health_checks() {
    log_info "Ex√©cution des tests de sant√©..."

    local namespace
    if [ "$ENVIRONMENT" = "production" ]; then
        namespace="qframe"
    else
        namespace="qframe-$ENVIRONMENT"
    fi

    # Test de l'API
    log_info "Test de sant√© de l'API..."
    kubectl run health-test-api --image=curlimages/curl --rm -i --restart=Never -n "$namespace" -- \
        curl -f "http://qframe-api:8000/health" || {
        log_error "Test de sant√© de l'API √©chou√©"
        return 1
    }

    # Test de l'UI
    log_info "Test de sant√© de l'UI..."
    kubectl run health-test-ui --image=curlimages/curl --rm -i --restart=Never -n "$namespace" -- \
        curl -f "http://qframe-ui:8501/_stcore/health" || {
        log_error "Test de sant√© de l'UI √©chou√©"
        return 1
    }

    log_success "Tous les tests de sant√© ont r√©ussi"
}

# üìä Afficher le statut du d√©ploiement
show_status() {
    log_info "Statut du d√©ploiement:"

    local namespace
    if [ "$ENVIRONMENT" = "production" ]; then
        namespace="qframe"
    else
        namespace="qframe-$ENVIRONMENT"
    fi

    echo ""
    echo "üì¶ Pods:"
    kubectl get pods -n "$namespace" -o wide

    echo ""
    echo "üåê Services:"
    kubectl get services -n "$namespace"

    echo ""
    echo "üîó Ingress:"
    kubectl get ingress -n "$namespace" 2>/dev/null || echo "Aucun ingress configur√©"

    echo ""
    echo "üìä Resource Usage:"
    kubectl top pods -n "$namespace" 2>/dev/null || echo "Metrics server non disponible"
}

# üîÑ Rollback en cas de probl√®me
rollback() {
    log_warning "Rollback du d√©ploiement..."

    local namespace
    if [ "$ENVIRONMENT" = "production" ]; then
        namespace="qframe"
    else
        namespace="qframe-$ENVIRONMENT"
    fi

    # Rollback API
    kubectl rollout undo deployment/qframe-api -n "$namespace"

    # Rollback UI
    kubectl rollout undo deployment/qframe-ui -n "$namespace"

    log_success "Rollback effectu√©"
}

# üè† Fonction principale
main() {
    log_info "üöÄ D√©marrage du d√©ploiement QFrame"
    log_info "Environment: $ENVIRONMENT"
    log_info "Version: $VERSION"

    # Trap pour nettoyer en cas d'erreur
    trap 'log_error "D√©ploiement √©chou√©! Voir les logs ci-dessus."' ERR

    check_prerequisites
    build_images

    # Push seulement si on n'est pas en d√©veloppement local
    if [ "$ENVIRONMENT" != "local" ]; then
        push_images
    fi

    deploy_kubernetes
    wait_for_deployment

    # Tests de sant√©
    if ! health_checks; then
        log_error "Tests de sant√© √©chou√©s! Rollback recommand√©."
        read -p "Voulez-vous effectuer un rollback? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rollback
        fi
        exit 1
    fi

    show_status

    log_success "üéâ D√©ploiement QFrame termin√© avec succ√®s!"

    if [ "$ENVIRONMENT" = "production" ]; then
        log_info "üåê URLs de production:"
        log_info "  - UI: https://qframe.your-domain.com"
        log_info "  - API: https://api.qframe.your-domain.com"
        log_info "  - Monitoring: https://grafana.qframe.your-domain.com"
    fi
}

# üÜò Aide
show_help() {
    cat << EOF
üöÄ QFrame Deployment Script

Usage: $0 [ENVIRONMENT] [VERSION]

ENVIRONMENT:
  - local      : D√©ploiement local (d√©faut: staging)
  - staging    : Environnement de staging
  - production : Environnement de production

VERSION:
  - latest     : Derni√®re version (d√©faut)
  - v1.0.0     : Version sp√©cifique
  - main-abc123: Version bas√©e sur commit

Examples:
  $0                           # D√©ploie staging avec latest
  $0 production v1.0.0         # D√©ploie production avec v1.0.0
  $0 staging main-abc123       # D√©ploie staging avec version commit

Options:
  -h, --help   : Affiche cette aide
  --rollback   : Effectue un rollback du dernier d√©ploiement

EOF
}

# üéØ Point d'entr√©e
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    --rollback)
        rollback
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac